
F303K_Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002170  08002170  00012170  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080021f4  080021f4  000121f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080021f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000200  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000204  20000204  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dda9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003962  00000000  00000000  0003dddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000aa59  00000000  00000000  0004173f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c80  00000000  00000000  0004c198  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fc8  00000000  00000000  0004ce18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000082e1  00000000  00000000  0004dde0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000044a8  00000000  00000000  000560c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005a569  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002604  00000000  00000000  0005a5e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002158 	.word	0x08002158

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002158 	.word	0x08002158

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f880 	bl	80002dc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f846 	bl	8000274 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f827 	bl	8000250 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f001 fd06 	bl	8001c18 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000024 	.word	0x20000024

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000024 	.word	0x20000024

08000230 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000232:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000234:	f7ff fff6 	bl	8000224 <HAL_GetTick>
  uint32_t wait = Delay;
 8000238:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800023a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800023c:	4605      	mov	r5, r0
  {
     wait++;
 800023e:	bf18      	it	ne
 8000240:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000242:	f7ff ffef 	bl	8000224 <HAL_GetTick>
 8000246:	1b40      	subs	r0, r0, r5
 8000248:	42a0      	cmp	r0, r4
 800024a:	d3fa      	bcc.n	8000242 <HAL_Delay+0x12>
  {
  }
}
 800024c:	b003      	add	sp, #12
 800024e:	bd30      	pop	{r4, r5, pc}

08000250 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000252:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000254:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000258:	041b      	lsls	r3, r3, #16
 800025a:	0c1b      	lsrs	r3, r3, #16
 800025c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000260:	0200      	lsls	r0, r0, #8
 8000262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000266:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800026a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800026c:	60d3      	str	r3, [r2, #12]
 800026e:	4770      	bx	lr
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000276:	b530      	push	{r4, r5, lr}
 8000278:	68dc      	ldr	r4, [r3, #12]
 800027a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800027e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000282:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000284:	2b04      	cmp	r3, #4
 8000286:	bf28      	it	cs
 8000288:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	f04f 0501 	mov.w	r5, #1
 8000290:	fa05 f303 	lsl.w	r3, r5, r3
 8000294:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000298:	bf8c      	ite	hi
 800029a:	3c03      	subhi	r4, #3
 800029c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029e:	4019      	ands	r1, r3
 80002a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002a2:	fa05 f404 	lsl.w	r4, r5, r4
 80002a6:	3c01      	subs	r4, #1
 80002a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ac:	ea42 0201 	orr.w	r2, r2, r1
 80002b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	bfaf      	iteee	ge
 80002b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	f000 000f 	andlt.w	r0, r0, #15
 80002be:	4b06      	ldrlt	r3, [pc, #24]	; (80002d8 <HAL_NVIC_SetPriority+0x64>)
 80002c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	bfa5      	ittet	ge
 80002c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002d0:	bd30      	pop	{r4, r5, pc}
 80002d2:	bf00      	nop
 80002d4:	e000ed00 	.word	0xe000ed00
 80002d8:	e000ed14 	.word	0xe000ed14

080002dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002dc:	3801      	subs	r0, #1
 80002de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e2:	d20a      	bcs.n	80002fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	21f0      	movs	r1, #240	; 0xf0
 80002ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000e010 	.word	0xe000e010
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800030a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800030c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800030e:	bf0c      	ite	eq
 8000310:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000314:	f022 0204 	bicne.w	r2, r2, #4
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	4770      	bx	lr
 800031c:	e000e010 	.word	0xe000e010

08000320 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000320:	4770      	bx	lr

08000322 <HAL_SYSTICK_IRQHandler>:
{
 8000322:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000324:	f7ff fffc 	bl	8000320 <HAL_SYSTICK_Callback>
 8000328:	bd08      	pop	{r3, pc}
	...

0800032c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000330:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000332:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000334:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800049c <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000338:	4a56      	ldr	r2, [pc, #344]	; (8000494 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033a:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800033c:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000340:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000342:	9c01      	ldr	r4, [sp, #4]
 8000344:	40dc      	lsrs	r4, r3
 8000346:	d102      	bne.n	800034e <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000348:	b005      	add	sp, #20
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800034e:	2401      	movs	r4, #1
 8000350:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000354:	9c01      	ldr	r4, [sp, #4]
 8000356:	ea14 050a 	ands.w	r5, r4, sl
 800035a:	f000 8093 	beq.w	8000484 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800035e:	684c      	ldr	r4, [r1, #4]
 8000360:	f024 0b10 	bic.w	fp, r4, #16
 8000364:	f1bb 0f02 	cmp.w	fp, #2
 8000368:	d111      	bne.n	800038e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800036a:	08df      	lsrs	r7, r3, #3
 800036c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000370:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000374:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000376:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800037a:	fa09 fc0e 	lsl.w	ip, r9, lr
 800037e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000382:	690e      	ldr	r6, [r1, #16]
 8000384:	fa06 f60e 	lsl.w	r6, r6, lr
 8000388:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 800038c:	623e      	str	r6, [r7, #32]
 800038e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000392:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000394:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000396:	fa07 f70c 	lsl.w	r7, r7, ip
 800039a:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800039c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a2:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003aa:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ae:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003b2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b4:	d811      	bhi.n	80003da <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003b6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003b8:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003bc:	68ce      	ldr	r6, [r1, #12]
 80003be:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003c2:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003c6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003c8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003ca:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ce:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003d2:	409e      	lsls	r6, r3
 80003d4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003d8:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003da:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003dc:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003de:	688e      	ldr	r6, [r1, #8]
 80003e0:	fa06 f60c 	lsl.w	r6, r6, ip
 80003e4:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003e6:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003e8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ea:	d54b      	bpl.n	8000484 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ec:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003f0:	f046 0601 	orr.w	r6, r6, #1
 80003f4:	f8c8 6018 	str.w	r6, [r8, #24]
 80003f8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003fc:	f023 0703 	bic.w	r7, r3, #3
 8000400:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000404:	f006 0601 	and.w	r6, r6, #1
 8000408:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800040c:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800040e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000414:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000416:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800041a:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800041e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000422:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000426:	d02f      	beq.n	8000488 <HAL_GPIO_Init+0x15c>
 8000428:	4e1b      	ldr	r6, [pc, #108]	; (8000498 <HAL_GPIO_Init+0x16c>)
 800042a:	42b0      	cmp	r0, r6
 800042c:	d02e      	beq.n	800048c <HAL_GPIO_Init+0x160>
 800042e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000432:	42b0      	cmp	r0, r6
 8000434:	d02c      	beq.n	8000490 <HAL_GPIO_Init+0x164>
 8000436:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800043a:	42b0      	cmp	r0, r6
 800043c:	bf14      	ite	ne
 800043e:	2605      	movne	r6, #5
 8000440:	2603      	moveq	r6, #3
 8000442:	fa06 f60e 	lsl.w	r6, r6, lr
 8000446:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800044a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800044c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800044e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000450:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000454:	bf0c      	ite	eq
 8000456:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000458:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800045a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800045c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800045e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000462:	bf0c      	ite	eq
 8000464:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000466:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000468:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800046a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800046c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000470:	bf0c      	ite	eq
 8000472:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000474:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000476:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000478:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800047a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800047c:	bf54      	ite	pl
 800047e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000480:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000482:	60d6      	str	r6, [r2, #12]
    position++;
 8000484:	3301      	adds	r3, #1
 8000486:	e75c      	b.n	8000342 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000488:	2600      	movs	r6, #0
 800048a:	e7da      	b.n	8000442 <HAL_GPIO_Init+0x116>
 800048c:	2601      	movs	r6, #1
 800048e:	e7d8      	b.n	8000442 <HAL_GPIO_Init+0x116>
 8000490:	2602      	movs	r6, #2
 8000492:	e7d6      	b.n	8000442 <HAL_GPIO_Init+0x116>
 8000494:	40010400 	.word	0x40010400
 8000498:	48000400 	.word	0x48000400
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004a0:	6903      	ldr	r3, [r0, #16]
 80004a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80004a4:	bf14      	ite	ne
 80004a6:	2001      	movne	r0, #1
 80004a8:	2000      	moveq	r0, #0
 80004aa:	4770      	bx	lr

080004ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004ac:	b10a      	cbz	r2, 80004b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ae:	6181      	str	r1, [r0, #24]
 80004b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b2:	6281      	str	r1, [r0, #40]	; 0x28
 80004b4:	4770      	bx	lr

080004b6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80004b6:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80004b8:	4604      	mov	r4, r0
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d04a      	beq.n	8000554 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80004be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80004c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004c6:	b91b      	cbnz	r3, 80004d0 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80004c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80004cc:	f000 fff0 	bl	80014b0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004d0:	2324      	movs	r3, #36	; 0x24
 80004d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004d6:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004d8:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	f022 0201 	bic.w	r2, r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80004e2:	6862      	ldr	r2, [r4, #4]
 80004e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80004e8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004ea:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004ec:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004f6:	d124      	bne.n	8000542 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80004f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80004fc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80004fe:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000500:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000502:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800050a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800050c:	68da      	ldr	r2, [r3, #12]
 800050e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000512:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000514:	6922      	ldr	r2, [r4, #16]
 8000516:	430a      	orrs	r2, r1
 8000518:	69a1      	ldr	r1, [r4, #24]
 800051a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800051e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000520:	6a21      	ldr	r1, [r4, #32]
 8000522:	69e2      	ldr	r2, [r4, #28]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f042 0201 	orr.w	r2, r2, #1
 800052e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000530:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000532:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000534:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800053a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800053c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000540:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000542:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000546:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000548:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800054a:	bf04      	itt	eq
 800054c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000550:	605a      	streq	r2, [r3, #4]
 8000552:	e7d4      	b.n	80004fe <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000554:	2001      	movs	r0, #1
}
 8000556:	bd10      	pop	{r4, pc}

08000558 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000558:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	2a20      	cmp	r2, #32
{
 8000560:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000562:	d11d      	bne.n	80005a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000564:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000568:	2b01      	cmp	r3, #1
 800056a:	d019      	beq.n	80005a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800056c:	2324      	movs	r3, #36	; 0x24
 800056e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000572:	6803      	ldr	r3, [r0, #0]
 8000574:	681c      	ldr	r4, [r3, #0]
 8000576:	f024 0401 	bic.w	r4, r4, #1
 800057a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800057c:	681c      	ldr	r4, [r3, #0]
 800057e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000582:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000584:	681c      	ldr	r4, [r3, #0]
 8000586:	4321      	orrs	r1, r4
 8000588:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	f041 0101 	orr.w	r1, r1, #1
 8000590:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000592:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000594:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000598:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800059c:	4618      	mov	r0, r3
 800059e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80005a0:	2002      	movs	r0, #2
  }
}
 80005a2:	bd10      	pop	{r4, pc}

080005a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80005a4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80005a6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80005aa:	b2e4      	uxtb	r4, r4
 80005ac:	2c20      	cmp	r4, #32
 80005ae:	d11c      	bne.n	80005ea <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80005b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d018      	beq.n	80005ea <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80005b8:	2324      	movs	r3, #36	; 0x24
 80005ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80005be:	6803      	ldr	r3, [r0, #0]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	f022 0201 	bic.w	r2, r2, #1
 80005c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80005c8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80005ca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80005ce:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80005d2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f042 0201 	orr.w	r2, r2, #1
 80005da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80005dc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80005de:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80005e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80005ea:	2002      	movs	r0, #2
  }
}
 80005ec:	bd10      	pop	{r4, pc}

080005ee <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80005ee:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80005f0:	4604      	mov	r4, r0
 80005f2:	b300      	cbz	r0, 8000636 <HAL_IWDG_Init+0x48>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80005f4:	6803      	ldr	r3, [r0, #0]
 80005f6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80005fa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80005fc:	f245 5255 	movw	r2, #21845	; 0x5555
 8000600:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000602:	6842      	ldr	r2, [r0, #4]
 8000604:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000606:	6882      	ldr	r2, [r0, #8]
 8000608:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800060a:	f7ff fe0b 	bl	8000224 <HAL_GetTick>
 800060e:	4605      	mov	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8000610:	6823      	ldr	r3, [r4, #0]
 8000612:	68d8      	ldr	r0, [r3, #12]
 8000614:	b940      	cbnz	r0, 8000628 <HAL_IWDG_Init+0x3a>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8000616:	68e2      	ldr	r2, [r4, #12]
 8000618:	6919      	ldr	r1, [r3, #16]
 800061a:	4291      	cmp	r1, r2
    hiwdg->Instance->WINR = hiwdg->Init.Window;
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800061c:	bf0a      	itet	eq
 800061e:	f64a 22aa 	movweq	r2, #43690	; 0xaaaa
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8000622:	611a      	strne	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000624:	601a      	streq	r2, [r3, #0]
 8000626:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000628:	f7ff fdfc 	bl	8000224 <HAL_GetTick>
 800062c:	1b40      	subs	r0, r0, r5
 800062e:	2830      	cmp	r0, #48	; 0x30
 8000630:	d9ee      	bls.n	8000610 <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8000632:	2003      	movs	r0, #3
  }

  /* Return function status */
  return HAL_OK;
}
 8000634:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000636:	2001      	movs	r0, #1
 8000638:	bd38      	pop	{r3, r4, r5, pc}

0800063a <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800063a:	6803      	ldr	r3, [r0, #0]
 800063c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000640:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000642:	2000      	movs	r0, #0
 8000644:	4770      	bx	lr
	...

08000648 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000648:	6803      	ldr	r3, [r0, #0]
 800064a:	07da      	lsls	r2, r3, #31
{
 800064c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000650:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000652:	d411      	bmi.n	8000678 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000654:	682b      	ldr	r3, [r5, #0]
 8000656:	079b      	lsls	r3, r3, #30
 8000658:	f100 8088 	bmi.w	800076c <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800065c:	682b      	ldr	r3, [r5, #0]
 800065e:	071c      	lsls	r4, r3, #28
 8000660:	f100 80f8 	bmi.w	8000854 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000664:	682b      	ldr	r3, [r5, #0]
 8000666:	0758      	lsls	r0, r3, #29
 8000668:	f100 8141 	bmi.w	80008ee <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800066c:	69ea      	ldr	r2, [r5, #28]
 800066e:	2a00      	cmp	r2, #0
 8000670:	f040 81d7 	bne.w	8000a22 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000674:	2000      	movs	r0, #0
 8000676:	e021      	b.n	80006bc <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000678:	4cba      	ldr	r4, [pc, #744]	; (8000964 <HAL_RCC_OscConfig+0x31c>)
 800067a:	6863      	ldr	r3, [r4, #4]
 800067c:	f003 030c 	and.w	r3, r3, #12
 8000680:	2b04      	cmp	r3, #4
 8000682:	d007      	beq.n	8000694 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000684:	6863      	ldr	r3, [r4, #4]
 8000686:	f003 030c 	and.w	r3, r3, #12
 800068a:	2b08      	cmp	r3, #8
 800068c:	d119      	bne.n	80006c2 <HAL_RCC_OscConfig+0x7a>
 800068e:	6863      	ldr	r3, [r4, #4]
 8000690:	03df      	lsls	r7, r3, #15
 8000692:	d516      	bpl.n	80006c2 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000698:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800069c:	6821      	ldr	r1, [r4, #0]
 800069e:	fa93 f3a3 	rbit	r3, r3
 80006a2:	fab3 f383 	clz	r3, r3
 80006a6:	f003 031f 	and.w	r3, r3, #31
 80006aa:	2201      	movs	r2, #1
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	420b      	tst	r3, r1
 80006b2:	d0cf      	beq.n	8000654 <HAL_RCC_OscConfig+0xc>
 80006b4:	686b      	ldr	r3, [r5, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1cc      	bne.n	8000654 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80006ba:	2001      	movs	r0, #1
}
 80006bc:	b002      	add	sp, #8
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c2:	686a      	ldr	r2, [r5, #4]
 80006c4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80006c8:	d125      	bne.n	8000716 <HAL_RCC_OscConfig+0xce>
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006d0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006d4:	68a9      	ldr	r1, [r5, #8]
 80006d6:	f023 030f 	bic.w	r3, r3, #15
 80006da:	430b      	orrs	r3, r1
 80006dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006de:	b352      	cbz	r2, 8000736 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80006e0:	f7ff fda0 	bl	8000224 <HAL_GetTick>
 80006e4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006e8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006ea:	2701      	movs	r7, #1
 80006ec:	fa96 f3a6 	rbit	r3, r6
 80006f0:	6822      	ldr	r2, [r4, #0]
 80006f2:	fa96 f3a6 	rbit	r3, r6
 80006f6:	fab3 f383 	clz	r3, r3
 80006fa:	f003 031f 	and.w	r3, r3, #31
 80006fe:	fa07 f303 	lsl.w	r3, r7, r3
 8000702:	4213      	tst	r3, r2
 8000704:	d1a6      	bne.n	8000654 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000706:	f7ff fd8d 	bl	8000224 <HAL_GetTick>
 800070a:	eba0 0008 	sub.w	r0, r0, r8
 800070e:	2864      	cmp	r0, #100	; 0x64
 8000710:	d9ec      	bls.n	80006ec <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000712:	2003      	movs	r0, #3
 8000714:	e7d2      	b.n	80006bc <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000716:	6823      	ldr	r3, [r4, #0]
 8000718:	b932      	cbnz	r2, 8000728 <HAL_RCC_OscConfig+0xe0>
 800071a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800071e:	6023      	str	r3, [r4, #0]
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000726:	e7d3      	b.n	80006d0 <HAL_RCC_OscConfig+0x88>
 8000728:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800072c:	d1f5      	bne.n	800071a <HAL_RCC_OscConfig+0xd2>
 800072e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000732:	6023      	str	r3, [r4, #0]
 8000734:	e7c9      	b.n	80006ca <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000736:	f7ff fd75 	bl	8000224 <HAL_GetTick>
 800073a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800073e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000740:	2701      	movs	r7, #1
 8000742:	fa96 f3a6 	rbit	r3, r6
 8000746:	6822      	ldr	r2, [r4, #0]
 8000748:	fa96 f3a6 	rbit	r3, r6
 800074c:	fab3 f383 	clz	r3, r3
 8000750:	f003 031f 	and.w	r3, r3, #31
 8000754:	fa07 f303 	lsl.w	r3, r7, r3
 8000758:	4213      	tst	r3, r2
 800075a:	f43f af7b 	beq.w	8000654 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800075e:	f7ff fd61 	bl	8000224 <HAL_GetTick>
 8000762:	eba0 0008 	sub.w	r0, r0, r8
 8000766:	2864      	cmp	r0, #100	; 0x64
 8000768:	d9eb      	bls.n	8000742 <HAL_RCC_OscConfig+0xfa>
 800076a:	e7d2      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800076c:	4c7d      	ldr	r4, [pc, #500]	; (8000964 <HAL_RCC_OscConfig+0x31c>)
 800076e:	6863      	ldr	r3, [r4, #4]
 8000770:	f013 0f0c 	tst.w	r3, #12
 8000774:	d007      	beq.n	8000786 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000776:	6863      	ldr	r3, [r4, #4]
 8000778:	f003 030c 	and.w	r3, r3, #12
 800077c:	2b08      	cmp	r3, #8
 800077e:	d121      	bne.n	80007c4 <HAL_RCC_OscConfig+0x17c>
 8000780:	6863      	ldr	r3, [r4, #4]
 8000782:	03de      	lsls	r6, r3, #15
 8000784:	d41e      	bmi.n	80007c4 <HAL_RCC_OscConfig+0x17c>
 8000786:	2302      	movs	r3, #2
 8000788:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800078c:	6821      	ldr	r1, [r4, #0]
 800078e:	fa93 f3a3 	rbit	r3, r3
 8000792:	fab3 f383 	clz	r3, r3
 8000796:	f003 031f 	and.w	r3, r3, #31
 800079a:	2201      	movs	r2, #1
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	420b      	tst	r3, r1
 80007a2:	d002      	beq.n	80007aa <HAL_RCC_OscConfig+0x162>
 80007a4:	692b      	ldr	r3, [r5, #16]
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d187      	bne.n	80006ba <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007aa:	6821      	ldr	r1, [r4, #0]
 80007ac:	23f8      	movs	r3, #248	; 0xf8
 80007ae:	fa93 f3a3 	rbit	r3, r3
 80007b2:	fab3 f283 	clz	r2, r3
 80007b6:	696b      	ldr	r3, [r5, #20]
 80007b8:	4093      	lsls	r3, r2
 80007ba:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80007be:	4313      	orrs	r3, r2
 80007c0:	6023      	str	r3, [r4, #0]
 80007c2:	e74b      	b.n	800065c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007c4:	692a      	ldr	r2, [r5, #16]
 80007c6:	2601      	movs	r6, #1
 80007c8:	b30a      	cbz	r2, 800080e <HAL_RCC_OscConfig+0x1c6>
 80007ca:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80007ce:	fab3 f383 	clz	r3, r3
 80007d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	2702      	movs	r7, #2
 80007de:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80007e0:	f7ff fd20 	bl	8000224 <HAL_GetTick>
 80007e4:	4680      	mov	r8, r0
 80007e6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007ea:	6822      	ldr	r2, [r4, #0]
 80007ec:	fa97 f3a7 	rbit	r3, r7
 80007f0:	fab3 f383 	clz	r3, r3
 80007f4:	f003 031f 	and.w	r3, r3, #31
 80007f8:	fa06 f303 	lsl.w	r3, r6, r3
 80007fc:	4213      	tst	r3, r2
 80007fe:	d1d4      	bne.n	80007aa <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000800:	f7ff fd10 	bl	8000224 <HAL_GetTick>
 8000804:	eba0 0008 	sub.w	r0, r0, r8
 8000808:	2802      	cmp	r0, #2
 800080a:	d9ec      	bls.n	80007e6 <HAL_RCC_OscConfig+0x19e>
 800080c:	e781      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
 800080e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000812:	fab3 f383 	clz	r3, r3
 8000816:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800081a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	2702      	movs	r7, #2
 8000822:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000824:	f7ff fcfe 	bl	8000224 <HAL_GetTick>
 8000828:	4680      	mov	r8, r0
 800082a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800082e:	6822      	ldr	r2, [r4, #0]
 8000830:	fa97 f3a7 	rbit	r3, r7
 8000834:	fab3 f383 	clz	r3, r3
 8000838:	f003 031f 	and.w	r3, r3, #31
 800083c:	fa06 f303 	lsl.w	r3, r6, r3
 8000840:	4213      	tst	r3, r2
 8000842:	f43f af0b 	beq.w	800065c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000846:	f7ff fced 	bl	8000224 <HAL_GetTick>
 800084a:	eba0 0008 	sub.w	r0, r0, r8
 800084e:	2802      	cmp	r0, #2
 8000850:	d9eb      	bls.n	800082a <HAL_RCC_OscConfig+0x1e2>
 8000852:	e75e      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000854:	69aa      	ldr	r2, [r5, #24]
 8000856:	4e43      	ldr	r6, [pc, #268]	; (8000964 <HAL_RCC_OscConfig+0x31c>)
 8000858:	4943      	ldr	r1, [pc, #268]	; (8000968 <HAL_RCC_OscConfig+0x320>)
 800085a:	2401      	movs	r4, #1
 800085c:	b31a      	cbz	r2, 80008a6 <HAL_RCC_OscConfig+0x25e>
 800085e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000862:	fab3 f383 	clz	r3, r3
 8000866:	440b      	add	r3, r1
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	2702      	movs	r7, #2
 800086c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800086e:	f7ff fcd9 	bl	8000224 <HAL_GetTick>
 8000872:	4680      	mov	r8, r0
 8000874:	fa97 f3a7 	rbit	r3, r7
 8000878:	fa97 f3a7 	rbit	r3, r7
 800087c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000880:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000882:	fa97 f3a7 	rbit	r3, r7
 8000886:	fab3 f383 	clz	r3, r3
 800088a:	f003 031f 	and.w	r3, r3, #31
 800088e:	fa04 f303 	lsl.w	r3, r4, r3
 8000892:	4213      	tst	r3, r2
 8000894:	f47f aee6 	bne.w	8000664 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000898:	f7ff fcc4 	bl	8000224 <HAL_GetTick>
 800089c:	eba0 0008 	sub.w	r0, r0, r8
 80008a0:	2802      	cmp	r0, #2
 80008a2:	d9e7      	bls.n	8000874 <HAL_RCC_OscConfig+0x22c>
 80008a4:	e735      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
 80008a6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80008aa:	fab3 f383 	clz	r3, r3
 80008ae:	440b      	add	r3, r1
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	2702      	movs	r7, #2
 80008b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008b6:	f7ff fcb5 	bl	8000224 <HAL_GetTick>
 80008ba:	4680      	mov	r8, r0
 80008bc:	fa97 f3a7 	rbit	r3, r7
 80008c0:	fa97 f3a7 	rbit	r3, r7
 80008c4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80008ca:	fa97 f3a7 	rbit	r3, r7
 80008ce:	fab3 f383 	clz	r3, r3
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	fa04 f303 	lsl.w	r3, r4, r3
 80008da:	4213      	tst	r3, r2
 80008dc:	f43f aec2 	beq.w	8000664 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008e0:	f7ff fca0 	bl	8000224 <HAL_GetTick>
 80008e4:	eba0 0008 	sub.w	r0, r0, r8
 80008e8:	2802      	cmp	r0, #2
 80008ea:	d9e7      	bls.n	80008bc <HAL_RCC_OscConfig+0x274>
 80008ec:	e711      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008ee:	4c1d      	ldr	r4, [pc, #116]	; (8000964 <HAL_RCC_OscConfig+0x31c>)
 80008f0:	69e3      	ldr	r3, [r4, #28]
 80008f2:	00d9      	lsls	r1, r3, #3
 80008f4:	d434      	bmi.n	8000960 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	69e3      	ldr	r3, [r4, #28]
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	61e3      	str	r3, [r4, #28]
 80008fe:	69e3      	ldr	r3, [r4, #28]
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000908:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800090a:	4f18      	ldr	r7, [pc, #96]	; (800096c <HAL_RCC_OscConfig+0x324>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	05da      	lsls	r2, r3, #23
 8000910:	d52e      	bpl.n	8000970 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000912:	68eb      	ldr	r3, [r5, #12]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d13c      	bne.n	8000992 <HAL_RCC_OscConfig+0x34a>
 8000918:	6a23      	ldr	r3, [r4, #32]
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000920:	f7ff fc80 	bl	8000224 <HAL_GetTick>
 8000924:	2702      	movs	r7, #2
 8000926:	4682      	mov	sl, r0
 8000928:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800092a:	f04f 0801 	mov.w	r8, #1
 800092e:	fa97 f3a7 	rbit	r3, r7
 8000932:	fa97 f3a7 	rbit	r3, r7
 8000936:	2b00      	cmp	r3, #0
 8000938:	d06b      	beq.n	8000a12 <HAL_RCC_OscConfig+0x3ca>
 800093a:	6a22      	ldr	r2, [r4, #32]
 800093c:	fa99 f3a9 	rbit	r3, r9
 8000940:	fab3 f383 	clz	r3, r3
 8000944:	f003 031f 	and.w	r3, r3, #31
 8000948:	fa08 f303 	lsl.w	r3, r8, r3
 800094c:	4213      	tst	r3, r2
 800094e:	d057      	beq.n	8000a00 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8000950:	2e00      	cmp	r6, #0
 8000952:	f43f ae8b 	beq.w	800066c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000956:	69e3      	ldr	r3, [r4, #28]
 8000958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800095c:	61e3      	str	r3, [r4, #28]
 800095e:	e685      	b.n	800066c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000960:	2600      	movs	r6, #0
 8000962:	e7d2      	b.n	800090a <HAL_RCC_OscConfig+0x2c2>
 8000964:	40021000 	.word	0x40021000
 8000968:	10908120 	.word	0x10908120
 800096c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000978:	f7ff fc54 	bl	8000224 <HAL_GetTick>
 800097c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	d4c6      	bmi.n	8000912 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000984:	f7ff fc4e 	bl	8000224 <HAL_GetTick>
 8000988:	eba0 0008 	sub.w	r0, r0, r8
 800098c:	2864      	cmp	r0, #100	; 0x64
 800098e:	d9f6      	bls.n	800097e <HAL_RCC_OscConfig+0x336>
 8000990:	e6bf      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000992:	bb3b      	cbnz	r3, 80009e4 <HAL_RCC_OscConfig+0x39c>
 8000994:	6a23      	ldr	r3, [r4, #32]
 8000996:	f023 0301 	bic.w	r3, r3, #1
 800099a:	6223      	str	r3, [r4, #32]
 800099c:	6a23      	ldr	r3, [r4, #32]
 800099e:	f023 0304 	bic.w	r3, r3, #4
 80009a2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009a4:	f7ff fc3e 	bl	8000224 <HAL_GetTick>
 80009a8:	2702      	movs	r7, #2
 80009aa:	4682      	mov	sl, r0
 80009ac:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009ae:	f04f 0801 	mov.w	r8, #1
 80009b2:	fa97 f3a7 	rbit	r3, r7
 80009b6:	fa97 f3a7 	rbit	r3, r7
 80009ba:	b373      	cbz	r3, 8000a1a <HAL_RCC_OscConfig+0x3d2>
 80009bc:	6a22      	ldr	r2, [r4, #32]
 80009be:	fa99 f3a9 	rbit	r3, r9
 80009c2:	fab3 f383 	clz	r3, r3
 80009c6:	f003 031f 	and.w	r3, r3, #31
 80009ca:	fa08 f303 	lsl.w	r3, r8, r3
 80009ce:	4213      	tst	r3, r2
 80009d0:	d0be      	beq.n	8000950 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009d2:	f7ff fc27 	bl	8000224 <HAL_GetTick>
 80009d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80009da:	eba0 000a 	sub.w	r0, r0, sl
 80009de:	4298      	cmp	r0, r3
 80009e0:	d9e7      	bls.n	80009b2 <HAL_RCC_OscConfig+0x36a>
 80009e2:	e696      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009e4:	2b05      	cmp	r3, #5
 80009e6:	6a23      	ldr	r3, [r4, #32]
 80009e8:	d103      	bne.n	80009f2 <HAL_RCC_OscConfig+0x3aa>
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6223      	str	r3, [r4, #32]
 80009f0:	e792      	b.n	8000918 <HAL_RCC_OscConfig+0x2d0>
 80009f2:	f023 0301 	bic.w	r3, r3, #1
 80009f6:	6223      	str	r3, [r4, #32]
 80009f8:	6a23      	ldr	r3, [r4, #32]
 80009fa:	f023 0304 	bic.w	r3, r3, #4
 80009fe:	e78e      	b.n	800091e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a00:	f7ff fc10 	bl	8000224 <HAL_GetTick>
 8000a04:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a08:	eba0 000a 	sub.w	r0, r0, sl
 8000a0c:	4298      	cmp	r0, r3
 8000a0e:	d98e      	bls.n	800092e <HAL_RCC_OscConfig+0x2e6>
 8000a10:	e67f      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
 8000a12:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a18:	e790      	b.n	800093c <HAL_RCC_OscConfig+0x2f4>
 8000a1a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a20:	e7cd      	b.n	80009be <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a22:	4c41      	ldr	r4, [pc, #260]	; (8000b28 <HAL_RCC_OscConfig+0x4e0>)
 8000a24:	6863      	ldr	r3, [r4, #4]
 8000a26:	f003 030c 	and.w	r3, r3, #12
 8000a2a:	2b08      	cmp	r3, #8
 8000a2c:	f43f ae45 	beq.w	80006ba <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a30:	2a02      	cmp	r2, #2
 8000a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a36:	d152      	bne.n	8000ade <HAL_RCC_OscConfig+0x496>
 8000a38:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a3c:	fab3 f383 	clz	r3, r3
 8000a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a4e:	f7ff fbe9 	bl	8000224 <HAL_GetTick>
 8000a52:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000a56:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a58:	2601      	movs	r6, #1
 8000a5a:	fa97 f3a7 	rbit	r3, r7
 8000a5e:	6822      	ldr	r2, [r4, #0]
 8000a60:	fa97 f3a7 	rbit	r3, r7
 8000a64:	fab3 f383 	clz	r3, r3
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	fa06 f303 	lsl.w	r3, r6, r3
 8000a70:	4213      	tst	r3, r2
 8000a72:	d12d      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a74:	6862      	ldr	r2, [r4, #4]
 8000a76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a78:	6a29      	ldr	r1, [r5, #32]
 8000a7a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	4313      	orrs	r3, r2
 8000a82:	6063      	str	r3, [r4, #4]
 8000a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a88:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a8c:	fab3 f383 	clz	r3, r3
 8000a90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a9e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fbc0 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000aa4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000aa6:	4607      	mov	r7, r0
 8000aa8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000aac:	6822      	ldr	r2, [r4, #0]
 8000aae:	fa95 f3a5 	rbit	r3, r5
 8000ab2:	fab3 f383 	clz	r3, r3
 8000ab6:	f003 031f 	and.w	r3, r3, #31
 8000aba:	fa06 f303 	lsl.w	r3, r6, r3
 8000abe:	4213      	tst	r3, r2
 8000ac0:	f47f add8 	bne.w	8000674 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ac4:	f7ff fbae 	bl	8000224 <HAL_GetTick>
 8000ac8:	1bc0      	subs	r0, r0, r7
 8000aca:	2802      	cmp	r0, #2
 8000acc:	d9ec      	bls.n	8000aa8 <HAL_RCC_OscConfig+0x460>
 8000ace:	e620      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad0:	f7ff fba8 	bl	8000224 <HAL_GetTick>
 8000ad4:	eba0 0008 	sub.w	r0, r0, r8
 8000ad8:	2802      	cmp	r0, #2
 8000ada:	d9be      	bls.n	8000a5a <HAL_RCC_OscConfig+0x412>
 8000adc:	e619      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
 8000ade:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ae2:	fab3 f383 	clz	r3, r3
 8000ae6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000aea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000af4:	f7ff fb96 	bl	8000224 <HAL_GetTick>
 8000af8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000afc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000afe:	2601      	movs	r6, #1
 8000b00:	fa95 f3a5 	rbit	r3, r5
 8000b04:	6822      	ldr	r2, [r4, #0]
 8000b06:	fa95 f3a5 	rbit	r3, r5
 8000b0a:	fab3 f383 	clz	r3, r3
 8000b0e:	f003 031f 	and.w	r3, r3, #31
 8000b12:	fa06 f303 	lsl.w	r3, r6, r3
 8000b16:	4213      	tst	r3, r2
 8000b18:	f43f adac 	beq.w	8000674 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1c:	f7ff fb82 	bl	8000224 <HAL_GetTick>
 8000b20:	1bc0      	subs	r0, r0, r7
 8000b22:	2802      	cmp	r0, #2
 8000b24:	d9ec      	bls.n	8000b00 <HAL_RCC_OscConfig+0x4b8>
 8000b26:	e5f4      	b.n	8000712 <HAL_RCC_OscConfig+0xca>
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b2c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000b2e:	4c13      	ldr	r4, [pc, #76]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x50>)
 8000b30:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b32:	f001 030c 	and.w	r3, r1, #12
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d11e      	bne.n	8000b78 <HAL_RCC_GetSysClockFreq+0x4c>
 8000b3a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000b3e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b42:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000b46:	fab3 f383 	clz	r3, r3
 8000b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x54>)
 8000b50:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b54:	220f      	movs	r2, #15
 8000b56:	fa92 f2a2 	rbit	r2, r2
 8000b5a:	fab2 f282 	clz	r2, r2
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b66:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b68:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b6a:	bf4a      	itet	mi
 8000b6c:	4b06      	ldrmi	r3, [pc, #24]	; (8000b88 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b6e:	4b07      	ldrpl	r3, [pc, #28]	; (8000b8c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b70:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b74:	4358      	muls	r0, r3
 8000b76:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b7a:	bd10      	pop	{r4, pc}
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	08002170 	.word	0x08002170
 8000b84:	08002180 	.word	0x08002180
 8000b88:	007a1200 	.word	0x007a1200
 8000b8c:	003d0900 	.word	0x003d0900

08000b90 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b90:	4a5c      	ldr	r2, [pc, #368]	; (8000d04 <HAL_RCC_ClockConfig+0x174>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	428b      	cmp	r3, r1
{
 8000b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ba2:	d330      	bcc.n	8000c06 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ba4:	6832      	ldr	r2, [r6, #0]
 8000ba6:	0791      	lsls	r1, r2, #30
 8000ba8:	d43a      	bmi.n	8000c20 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000baa:	07d2      	lsls	r2, r2, #31
 8000bac:	d440      	bmi.n	8000c30 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bae:	4a55      	ldr	r2, [pc, #340]	; (8000d04 <HAL_RCC_ClockConfig+0x174>)
 8000bb0:	6813      	ldr	r3, [r2, #0]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	429d      	cmp	r5, r3
 8000bb8:	f0c0 8092 	bcc.w	8000ce0 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bbc:	6832      	ldr	r2, [r6, #0]
 8000bbe:	4c52      	ldr	r4, [pc, #328]	; (8000d08 <HAL_RCC_ClockConfig+0x178>)
 8000bc0:	f012 0f04 	tst.w	r2, #4
 8000bc4:	f040 8097 	bne.w	8000cf6 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bc8:	0713      	lsls	r3, r2, #28
 8000bca:	d506      	bpl.n	8000bda <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bcc:	6863      	ldr	r3, [r4, #4]
 8000bce:	6932      	ldr	r2, [r6, #16]
 8000bd0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bd4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bd8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000bda:	f7ff ffa7 	bl	8000b2c <HAL_RCC_GetSysClockFreq>
 8000bde:	6863      	ldr	r3, [r4, #4]
 8000be0:	22f0      	movs	r2, #240	; 0xf0
 8000be2:	fa92 f2a2 	rbit	r2, r2
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bee:	40d3      	lsrs	r3, r2
 8000bf0:	4a46      	ldr	r2, [pc, #280]	; (8000d0c <HAL_RCC_ClockConfig+0x17c>)
 8000bf2:	5cd3      	ldrb	r3, [r2, r3]
 8000bf4:	40d8      	lsrs	r0, r3
 8000bf6:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <HAL_RCC_ClockConfig+0x180>)
 8000bf8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fae4 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000c00:	2000      	movs	r0, #0
}
 8000c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	f023 0307 	bic.w	r3, r3, #7
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c10:	6813      	ldr	r3, [r2, #0]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	4299      	cmp	r1, r3
 8000c18:	d0c4      	beq.n	8000ba4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c20:	4939      	ldr	r1, [pc, #228]	; (8000d08 <HAL_RCC_ClockConfig+0x178>)
 8000c22:	68b0      	ldr	r0, [r6, #8]
 8000c24:	684b      	ldr	r3, [r1, #4]
 8000c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c2a:	4303      	orrs	r3, r0
 8000c2c:	604b      	str	r3, [r1, #4]
 8000c2e:	e7bc      	b.n	8000baa <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c30:	6872      	ldr	r2, [r6, #4]
 8000c32:	4c35      	ldr	r4, [pc, #212]	; (8000d08 <HAL_RCC_ClockConfig+0x178>)
 8000c34:	2a01      	cmp	r2, #1
 8000c36:	d128      	bne.n	8000c8a <HAL_RCC_ClockConfig+0xfa>
 8000c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c3c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c40:	6821      	ldr	r1, [r4, #0]
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	fab3 f383 	clz	r3, r3
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c54:	d0e1      	beq.n	8000c1a <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c56:	6863      	ldr	r3, [r4, #4]
 8000c58:	f023 0303 	bic.w	r3, r3, #3
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000c60:	f7ff fae0 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c64:	6873      	ldr	r3, [r6, #4]
 8000c66:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000c68:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c6a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c6e:	d11f      	bne.n	8000cb0 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c70:	6863      	ldr	r3, [r4, #4]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d099      	beq.n	8000bae <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c7a:	f7ff fad3 	bl	8000224 <HAL_GetTick>
 8000c7e:	1bc0      	subs	r0, r0, r7
 8000c80:	4540      	cmp	r0, r8
 8000c82:	d9f5      	bls.n	8000c70 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000c84:	2003      	movs	r0, #3
 8000c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c8a:	2a02      	cmp	r2, #2
 8000c8c:	bf0c      	ite	eq
 8000c8e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000c92:	2302      	movne	r3, #2
 8000c94:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c98:	6820      	ldr	r0, [r4, #0]
 8000c9a:	fa93 f3a3 	rbit	r3, r3
 8000c9e:	fab3 f383 	clz	r3, r3
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	4203      	tst	r3, r0
 8000cae:	e7d1      	b.n	8000c54 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d110      	bne.n	8000cd6 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	f43f af77 	beq.w	8000bae <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc0:	f7ff fab0 	bl	8000224 <HAL_GetTick>
 8000cc4:	1bc0      	subs	r0, r0, r7
 8000cc6:	4540      	cmp	r0, r8
 8000cc8:	d9f4      	bls.n	8000cb4 <HAL_RCC_ClockConfig+0x124>
 8000cca:	e7db      	b.n	8000c84 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ccc:	f7ff faaa 	bl	8000224 <HAL_GetTick>
 8000cd0:	1bc0      	subs	r0, r0, r7
 8000cd2:	4540      	cmp	r0, r8
 8000cd4:	d8d6      	bhi.n	8000c84 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd6:	6863      	ldr	r3, [r4, #4]
 8000cd8:	f013 0f0c 	tst.w	r3, #12
 8000cdc:	d1f6      	bne.n	8000ccc <HAL_RCC_ClockConfig+0x13c>
 8000cde:	e766      	b.n	8000bae <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce0:	6813      	ldr	r3, [r2, #0]
 8000ce2:	f023 0307 	bic.w	r3, r3, #7
 8000ce6:	432b      	orrs	r3, r5
 8000ce8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	429d      	cmp	r5, r3
 8000cf2:	d192      	bne.n	8000c1a <HAL_RCC_ClockConfig+0x8a>
 8000cf4:	e762      	b.n	8000bbc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf6:	6863      	ldr	r3, [r4, #4]
 8000cf8:	68f1      	ldr	r1, [r6, #12]
 8000cfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	6063      	str	r3, [r4, #4]
 8000d02:	e761      	b.n	8000bc8 <HAL_RCC_ClockConfig+0x38>
 8000d04:	40022000 	.word	0x40022000
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	080021bb 	.word	0x080021bb
 8000d10:	20000000 	.word	0x20000000

08000d14 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d14:	4b01      	ldr	r3, [pc, #4]	; (8000d1c <HAL_RCC_GetHCLKFreq+0x8>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000

08000d20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	fa92 f2a2 	rbit	r2, r2
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d34:	40d3      	lsrs	r3, r2
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d38:	5cd3      	ldrb	r3, [r2, r3]
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000d3c:	6810      	ldr	r0, [r2, #0]
}    
 8000d3e:	40d8      	lsrs	r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000
 8000d48:	080021cb 	.word	0x080021cb
 8000d4c:	20000000 	.word	0x20000000

08000d50 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d52:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	fa92 f2a2 	rbit	r2, r2
 8000d5c:	fab2 f282 	clz	r2, r2
 8000d60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d64:	40d3      	lsrs	r3, r2
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000d6c:	6810      	ldr	r0, [r2, #0]
} 
 8000d6e:	40d8      	lsrs	r0, r3
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	080021cb 	.word	0x080021cb
 8000d7c:	20000000 	.word	0x20000000

08000d80 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d80:	6803      	ldr	r3, [r0, #0]
{
 8000d82:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d86:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d88:	03d8      	lsls	r0, r3, #15
 8000d8a:	d520      	bpl.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8c:	4c50      	ldr	r4, [pc, #320]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000d8e:	69e3      	ldr	r3, [r4, #28]
 8000d90:	00d9      	lsls	r1, r3, #3
 8000d92:	d444      	bmi.n	8000e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	69e3      	ldr	r3, [r4, #28]
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	61e3      	str	r3, [r4, #28]
 8000d9c:	69e3      	ldr	r3, [r4, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000da6:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da8:	4f4a      	ldr	r7, [pc, #296]	; (8000ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	05da      	lsls	r2, r3, #23
 8000dae:	d538      	bpl.n	8000e22 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000db0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000db2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000db6:	d148      	bne.n	8000e4a <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000db8:	6a23      	ldr	r3, [r4, #32]
 8000dba:	686a      	ldr	r2, [r5, #4]
 8000dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000dc4:	b11e      	cbz	r6, 8000dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dc6:	69e3      	ldr	r3, [r4, #28]
 8000dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000dce:	6828      	ldr	r0, [r5, #0]
 8000dd0:	07c1      	lsls	r1, r0, #31
 8000dd2:	d506      	bpl.n	8000de2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000dd4:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000dd6:	68a9      	ldr	r1, [r5, #8]
 8000dd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dda:	f023 0303 	bic.w	r3, r3, #3
 8000dde:	430b      	orrs	r3, r1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000de2:	0682      	lsls	r2, r0, #26
 8000de4:	d506      	bpl.n	8000df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000de6:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000de8:	68e9      	ldr	r1, [r5, #12]
 8000dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dec:	f023 0310 	bic.w	r3, r3, #16
 8000df0:	430b      	orrs	r3, r1
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000df4:	0603      	lsls	r3, r0, #24
 8000df6:	d506      	bpl.n	8000e06 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000df8:	4a35      	ldr	r2, [pc, #212]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000dfa:	6929      	ldr	r1, [r5, #16]
 8000dfc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000dfe:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000e02:	430b      	orrs	r3, r1
 8000e04:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000e06:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000e0a:	d01b      	beq.n	8000e44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000e0c:	4a30      	ldr	r2, [pc, #192]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000e0e:	6969      	ldr	r1, [r5, #20]
 8000e10:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e16:	430b      	orrs	r3, r1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	e012      	b.n	8000e44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 8000e1e:	2600      	movs	r6, #0
 8000e20:	e7c2      	b.n	8000da8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e2a:	f7ff f9fb 	bl	8000224 <HAL_GetTick>
 8000e2e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	d4bc      	bmi.n	8000db0 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e36:	f7ff f9f5 	bl	8000224 <HAL_GetTick>
 8000e3a:	eba0 0008 	sub.w	r0, r0, r8
 8000e3e:	2864      	cmp	r0, #100	; 0x64
 8000e40:	d9f6      	bls.n	8000e30 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8000e42:	2003      	movs	r0, #3
}
 8000e44:	b002      	add	sp, #8
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e4a:	686a      	ldr	r2, [r5, #4]
 8000e4c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d0b1      	beq.n	8000db8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e54:	6a21      	ldr	r1, [r4, #32]
 8000e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5a:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000e5e:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e62:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8000e66:	fab2 f282 	clz	r2, r2
 8000e6a:	4472      	add	r2, lr
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	2701      	movs	r7, #1
 8000e70:	6017      	str	r7, [r2, #0]
 8000e72:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e76:	fab3 f383 	clz	r3, r3
 8000e7a:	4473      	add	r3, lr
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8000e82:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e84:	07c8      	lsls	r0, r1, #31
 8000e86:	d597      	bpl.n	8000db8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000e88:	f7ff f9cc 	bl	8000224 <HAL_GetTick>
 8000e8c:	f04f 0802 	mov.w	r8, #2
 8000e90:	4682      	mov	sl, r0
 8000e92:	46c1      	mov	r9, r8
 8000e94:	fa98 f3a8 	rbit	r3, r8
 8000e98:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e9c:	b19b      	cbz	r3, 8000ec6 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8000e9e:	6a22      	ldr	r2, [r4, #32]
 8000ea0:	fa99 f3a9 	rbit	r3, r9
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	fa07 f303 	lsl.w	r3, r7, r3
 8000eb0:	4213      	tst	r3, r2
 8000eb2:	d181      	bne.n	8000db8 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb4:	f7ff f9b6 	bl	8000224 <HAL_GetTick>
 8000eb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ebc:	eba0 000a 	sub.w	r0, r0, sl
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	d9e7      	bls.n	8000e94 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8000ec4:	e7bd      	b.n	8000e42 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8000ec6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ecc:	e7e8      	b.n	8000ea0 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	10908100 	.word	0x10908100

08000edc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000ede:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ee0:	4290      	cmp	r0, r2
{
 8000ee2:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ee4:	d005      	beq.n	8000ef2 <TIM_Base_SetConfig+0x16>
 8000ee6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eea:	d002      	beq.n	8000ef2 <TIM_Base_SetConfig+0x16>
 8000eec:	4c1e      	ldr	r4, [pc, #120]	; (8000f68 <TIM_Base_SetConfig+0x8c>)
 8000eee:	42a0      	cmp	r0, r4
 8000ef0:	d10c      	bne.n	8000f0c <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ef2:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ef8:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000efa:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000efe:	d010      	beq.n	8000f22 <TIM_Base_SetConfig+0x46>
 8000f00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f04:	d00d      	beq.n	8000f22 <TIM_Base_SetConfig+0x46>
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <TIM_Base_SetConfig+0x8c>)
 8000f08:	4290      	cmp	r0, r2
 8000f0a:	d00a      	beq.n	8000f22 <TIM_Base_SetConfig+0x46>
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <TIM_Base_SetConfig+0x90>)
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	d007      	beq.n	8000f22 <TIM_Base_SetConfig+0x46>
 8000f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f16:	4290      	cmp	r0, r2
 8000f18:	d003      	beq.n	8000f22 <TIM_Base_SetConfig+0x46>
 8000f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f1e:	4290      	cmp	r0, r2
 8000f20:	d103      	bne.n	8000f2a <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f22:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f28:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000f2a:	694a      	ldr	r2, [r1, #20]
 8000f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f30:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000f32:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f34:	688b      	ldr	r3, [r1, #8]
 8000f36:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f38:	680b      	ldr	r3, [r1, #0]
 8000f3a:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <TIM_Base_SetConfig+0x88>)
 8000f3e:	4298      	cmp	r0, r3
 8000f40:	d00b      	beq.n	8000f5a <TIM_Base_SetConfig+0x7e>
 8000f42:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d007      	beq.n	8000f5a <TIM_Base_SetConfig+0x7e>
 8000f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d003      	beq.n	8000f5a <TIM_Base_SetConfig+0x7e>
 8000f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f56:	4298      	cmp	r0, r3
 8000f58:	d101      	bne.n	8000f5e <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000f5a:	690b      	ldr	r3, [r1, #16]
 8000f5c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	6143      	str	r3, [r0, #20]
 8000f62:	bd10      	pop	{r4, pc}
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40014000 	.word	0x40014000

08000f70 <HAL_TIM_Base_Init>:
{ 
 8000f70:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f72:	4604      	mov	r4, r0
 8000f74:	b1a0      	cbz	r0, 8000fa0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f7e:	b91b      	cbnz	r3, 8000f88 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f84:	f000 feee 	bl	8001d64 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f8e:	6820      	ldr	r0, [r4, #0]
 8000f90:	1d21      	adds	r1, r4, #4
 8000f92:	f7ff ffa3 	bl	8000edc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fa0:	2001      	movs	r0, #1
}
 8000fa2:	bd10      	pop	{r4, pc}

08000fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000fa4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000fa8:	2b01      	cmp	r3, #1
{
 8000faa:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000fac:	d018      	beq.n	8000fe0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000fae:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000fb0:	4d0c      	ldr	r5, [pc, #48]	; (8000fe4 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8000fb2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000fb4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000fb6:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000fb8:	bf02      	ittt	eq
 8000fba:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8000fbc:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000fc0:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fc2:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fc4:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fca:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000fcc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000fd0:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fd2:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8000fd4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8000fd6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8000fd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8000fdc:	4618      	mov	r0, r3
 8000fde:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8000fe0:	2002      	movs	r0, #2
} 
 8000fe2:	bd30      	pop	{r4, r5, pc}
 8000fe4:	40012c00 	.word	0x40012c00

08000fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fec:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fee:	6921      	ldr	r1, [r4, #16]
 8000ff0:	68a3      	ldr	r3, [r4, #8]
 8000ff2:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ff4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	6961      	ldr	r1, [r4, #20]
 8000ffa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ffc:	4949      	ldr	r1, [pc, #292]	; (8001124 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ffe:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001000:	4001      	ands	r1, r0
 8001002:	430b      	orrs	r3, r1
 8001004:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001006:	686b      	ldr	r3, [r5, #4]
 8001008:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800100a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800100c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001010:	430b      	orrs	r3, r1
 8001012:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001014:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001016:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001018:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800101c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800101e:	430b      	orrs	r3, r1
 8001020:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <UART_SetConfig+0x140>)
 8001024:	429d      	cmp	r5, r3
 8001026:	d112      	bne.n	800104e <UART_SetConfig+0x66>
 8001028:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800102c:	493f      	ldr	r1, [pc, #252]	; (800112c <UART_SetConfig+0x144>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001034:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001038:	5ccb      	ldrb	r3, [r1, r3]
 800103a:	d13b      	bne.n	80010b4 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 800103c:	2b08      	cmp	r3, #8
 800103e:	d836      	bhi.n	80010ae <UART_SetConfig+0xc6>
 8001040:	e8df f003 	tbb	[pc, r3]
 8001044:	3524210f 	.word	0x3524210f
 8001048:	3535352d 	.word	0x3535352d
 800104c:	30          	.byte	0x30
 800104d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <UART_SetConfig+0x148>)
 8001050:	429d      	cmp	r5, r3
 8001052:	d003      	beq.n	800105c <UART_SetConfig+0x74>
 8001054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001058:	429d      	cmp	r5, r3
 800105a:	d15e      	bne.n	800111a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800105c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001060:	d131      	bne.n	80010c6 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001062:	f7ff fe5d 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001066:	6861      	ldr	r1, [r4, #4]
 8001068:	084a      	lsrs	r2, r1, #1
 800106a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001072:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001074:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001076:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 800107a:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800107c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001080:	4313      	orrs	r3, r2
 8001082:	60cb      	str	r3, [r1, #12]
 8001084:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001086:	f7ff fe63 	bl	8000d50 <HAL_RCC_GetPCLK2Freq>
 800108a:	e7ec      	b.n	8001066 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800108c:	6860      	ldr	r0, [r4, #4]
 800108e:	0843      	lsrs	r3, r0, #1
 8001090:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001094:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001098:	fbb3 f3f0 	udiv	r3, r3, r0
 800109c:	e7e9      	b.n	8001072 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800109e:	f7ff fd45 	bl	8000b2c <HAL_RCC_GetSysClockFreq>
 80010a2:	e7e0      	b.n	8001066 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010a4:	6860      	ldr	r0, [r4, #4]
 80010a6:	0843      	lsrs	r3, r0, #1
 80010a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010ac:	e7f4      	b.n	8001098 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e7e0      	b.n	8001076 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d833      	bhi.n	8001120 <UART_SetConfig+0x138>
 80010b8:	e8df f003 	tbb	[pc, r3]
 80010bc:	321b1005 	.word	0x321b1005
 80010c0:	32323227 	.word	0x32323227
 80010c4:	2a          	.byte	0x2a
 80010c5:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80010c6:	f7ff fe2b 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 80010ca:	6863      	ldr	r3, [r4, #4]
 80010cc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80010d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010d4:	b280      	uxth	r0, r0
 80010d6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80010d8:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 80010da:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80010dc:	f7ff fe38 	bl	8000d50 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010e0:	6863      	ldr	r3, [r4, #4]
 80010e2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80010e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <UART_SetConfig+0x140>)
 80010ec:	b280      	uxth	r0, r0
 80010ee:	60d8      	str	r0, [r3, #12]
 80010f0:	e7f2      	b.n	80010d8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80010f2:	6862      	ldr	r2, [r4, #4]
 80010f4:	0853      	lsrs	r3, r2, #1
 80010f6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80010fa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <UART_SetConfig+0x140>)
 8001104:	b29b      	uxth	r3, r3
 8001106:	60d3      	str	r3, [r2, #12]
 8001108:	e7e6      	b.n	80010d8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800110a:	f7ff fd0f 	bl	8000b2c <HAL_RCC_GetSysClockFreq>
 800110e:	e7e7      	b.n	80010e0 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001110:	6862      	ldr	r2, [r4, #4]
 8001112:	0853      	lsrs	r3, r2, #1
 8001114:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001118:	e7f1      	b.n	80010fe <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800111a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800111e:	d0c6      	beq.n	80010ae <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001120:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001122:	bd38      	pop	{r3, r4, r5, pc}
 8001124:	efff69f3 	.word	0xefff69f3
 8001128:	40013800 	.word	0x40013800
 800112c:	08002190 	.word	0x08002190
 8001130:	40004400 	.word	0x40004400

08001134 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001134:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001136:	07da      	lsls	r2, r3, #31
{
 8001138:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800113a:	d506      	bpl.n	800114a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800113c:	6801      	ldr	r1, [r0, #0]
 800113e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001140:	684a      	ldr	r2, [r1, #4]
 8001142:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001146:	4322      	orrs	r2, r4
 8001148:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800114a:	079c      	lsls	r4, r3, #30
 800114c:	d506      	bpl.n	800115c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800114e:	6801      	ldr	r1, [r0, #0]
 8001150:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001152:	684a      	ldr	r2, [r1, #4]
 8001154:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001158:	4322      	orrs	r2, r4
 800115a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800115c:	0759      	lsls	r1, r3, #29
 800115e:	d506      	bpl.n	800116e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001160:	6801      	ldr	r1, [r0, #0]
 8001162:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001164:	684a      	ldr	r2, [r1, #4]
 8001166:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800116a:	4322      	orrs	r2, r4
 800116c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800116e:	071a      	lsls	r2, r3, #28
 8001170:	d506      	bpl.n	8001180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001172:	6801      	ldr	r1, [r0, #0]
 8001174:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001176:	684a      	ldr	r2, [r1, #4]
 8001178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800117c:	4322      	orrs	r2, r4
 800117e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001180:	06dc      	lsls	r4, r3, #27
 8001182:	d506      	bpl.n	8001192 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001184:	6801      	ldr	r1, [r0, #0]
 8001186:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001188:	688a      	ldr	r2, [r1, #8]
 800118a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800118e:	4322      	orrs	r2, r4
 8001190:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001192:	0699      	lsls	r1, r3, #26
 8001194:	d506      	bpl.n	80011a4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001196:	6801      	ldr	r1, [r0, #0]
 8001198:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800119a:	688a      	ldr	r2, [r1, #8]
 800119c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011a0:	4322      	orrs	r2, r4
 80011a2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80011a4:	065a      	lsls	r2, r3, #25
 80011a6:	d50f      	bpl.n	80011c8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80011a8:	6801      	ldr	r1, [r0, #0]
 80011aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80011ac:	684a      	ldr	r2, [r1, #4]
 80011ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80011b2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80011b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80011b8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80011ba:	d105      	bne.n	80011c8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80011bc:	684a      	ldr	r2, [r1, #4]
 80011be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80011c0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80011c4:	4322      	orrs	r2, r4
 80011c6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80011c8:	061b      	lsls	r3, r3, #24
 80011ca:	d506      	bpl.n	80011da <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80011cc:	6802      	ldr	r2, [r0, #0]
 80011ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80011d0:	6853      	ldr	r3, [r2, #4]
 80011d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80011d6:	430b      	orrs	r3, r1
 80011d8:	6053      	str	r3, [r2, #4]
 80011da:	bd10      	pop	{r4, pc}

080011dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80011dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e0:	9d06      	ldr	r5, [sp, #24]
 80011e2:	4604      	mov	r4, r0
 80011e4:	460f      	mov	r7, r1
 80011e6:	4616      	mov	r6, r2
 80011e8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011ea:	6821      	ldr	r1, [r4, #0]
 80011ec:	69ca      	ldr	r2, [r1, #28]
 80011ee:	ea37 0302 	bics.w	r3, r7, r2
 80011f2:	bf0c      	ite	eq
 80011f4:	2201      	moveq	r2, #1
 80011f6:	2200      	movne	r2, #0
 80011f8:	42b2      	cmp	r2, r6
 80011fa:	d002      	beq.n	8001202 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80011fc:	2000      	movs	r0, #0
}
 80011fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001202:	1c6b      	adds	r3, r5, #1
 8001204:	d0f2      	beq.n	80011ec <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001206:	b99d      	cbnz	r5, 8001230 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001210:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800121a:	2320      	movs	r3, #32
 800121c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001220:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001224:	2300      	movs	r3, #0
 8001226:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800122a:	2003      	movs	r0, #3
 800122c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001230:	f7fe fff8 	bl	8000224 <HAL_GetTick>
 8001234:	eba0 0008 	sub.w	r0, r0, r8
 8001238:	4285      	cmp	r5, r0
 800123a:	d2d6      	bcs.n	80011ea <UART_WaitOnFlagUntilTimeout+0xe>
 800123c:	e7e4      	b.n	8001208 <UART_WaitOnFlagUntilTimeout+0x2c>

0800123e <HAL_UART_Transmit>:
{
 800123e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001242:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001244:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001248:	2b20      	cmp	r3, #32
{
 800124a:	4604      	mov	r4, r0
 800124c:	460d      	mov	r5, r1
 800124e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001250:	d14c      	bne.n	80012ec <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001252:	2900      	cmp	r1, #0
 8001254:	d048      	beq.n	80012e8 <HAL_UART_Transmit+0xaa>
 8001256:	2a00      	cmp	r2, #0
 8001258:	d046      	beq.n	80012e8 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800125a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800125e:	2b01      	cmp	r3, #1
 8001260:	d044      	beq.n	80012ec <HAL_UART_Transmit+0xae>
 8001262:	2301      	movs	r3, #1
 8001264:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001268:	2300      	movs	r3, #0
 800126a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800126c:	2321      	movs	r3, #33	; 0x21
 800126e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001272:	f7fe ffd7 	bl	8000224 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001276:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800127a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800127c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001280:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001284:	b292      	uxth	r2, r2
 8001286:	b962      	cbnz	r2, 80012a2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001288:	9700      	str	r7, [sp, #0]
 800128a:	4633      	mov	r3, r6
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff ffa4 	bl	80011dc <UART_WaitOnFlagUntilTimeout>
 8001294:	b998      	cbnz	r0, 80012be <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001296:	2320      	movs	r3, #32
 8001298:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800129c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80012a0:	e00e      	b.n	80012c0 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80012a2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012a6:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012b0:	2200      	movs	r2, #0
 80012b2:	4633      	mov	r3, r6
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff ff90 	bl	80011dc <UART_WaitOnFlagUntilTimeout>
 80012bc:	b118      	cbz	r0, 80012c6 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80012be:	2003      	movs	r0, #3
}
 80012c0:	b002      	add	sp, #8
 80012c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012c6:	68a3      	ldr	r3, [r4, #8]
 80012c8:	6822      	ldr	r2, [r4, #0]
 80012ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ce:	d107      	bne.n	80012e0 <HAL_UART_Transmit+0xa2>
 80012d0:	6923      	ldr	r3, [r4, #16]
 80012d2:	b92b      	cbnz	r3, 80012e0 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80012d4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80012d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012dc:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80012de:	e7cf      	b.n	8001280 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80012e0:	782b      	ldrb	r3, [r5, #0]
 80012e2:	8513      	strh	r3, [r2, #40]	; 0x28
 80012e4:	3501      	adds	r5, #1
 80012e6:	e7cb      	b.n	8001280 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e7e9      	b.n	80012c0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80012ec:	2002      	movs	r0, #2
 80012ee:	e7e7      	b.n	80012c0 <HAL_UART_Transmit+0x82>

080012f0 <UART_CheckIdleState>:
{
 80012f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012f2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012f4:	2600      	movs	r6, #0
 80012f6:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80012f8:	f7fe ff94 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001302:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001304:	d417      	bmi.n	8001336 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	075b      	lsls	r3, r3, #29
 800130c:	d50a      	bpl.n	8001324 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800130e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	462b      	mov	r3, r5
 8001318:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800131c:	4620      	mov	r0, r4
 800131e:	f7ff ff5d 	bl	80011dc <UART_WaitOnFlagUntilTimeout>
 8001322:	b9a0      	cbnz	r0, 800134e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001324:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001326:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001328:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800132c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001330:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001334:	e00c      	b.n	8001350 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001336:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	4632      	mov	r2, r6
 800133e:	4603      	mov	r3, r0
 8001340:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001344:	4620      	mov	r0, r4
 8001346:	f7ff ff49 	bl	80011dc <UART_WaitOnFlagUntilTimeout>
 800134a:	2800      	cmp	r0, #0
 800134c:	d0db      	beq.n	8001306 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800134e:	2003      	movs	r0, #3
}
 8001350:	b002      	add	sp, #8
 8001352:	bd70      	pop	{r4, r5, r6, pc}

08001354 <HAL_UART_Init>:
{
 8001354:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001356:	4604      	mov	r4, r0
 8001358:	b360      	cbz	r0, 80013b4 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800135a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800135e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001362:	b91b      	cbnz	r3, 800136c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001364:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001368:	f000 fd54 	bl	8001e14 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800136c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800136e:	2324      	movs	r3, #36	; 0x24
 8001370:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800137c:	4620      	mov	r0, r4
 800137e:	f7ff fe33 	bl	8000fe8 <UART_SetConfig>
 8001382:	2801      	cmp	r0, #1
 8001384:	d016      	beq.n	80013b4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001388:	b113      	cbz	r3, 8001390 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff fed2 	bl	8001134 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001398:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80013a8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80013b0:	f7ff bf9e 	b.w	80012f0 <UART_CheckIdleState>
}
 80013b4:	2001      	movs	r0, #1
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_GPIO_Init+0x88>)
{
 80013ba:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	695a      	ldr	r2, [r3, #20]
{
 80013c6:	b088      	sub	sp, #32
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80013de:	9201      	str	r2, [sp, #4]
 80013e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80013f0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80013f4:	21f3      	movs	r1, #243	; 0xf3
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80013fc:	f7ff f856 	bl	80004ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8001400:	23f3      	movs	r3, #243	; 0xf3
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8001404:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f7fe ff8a 	bl	800032c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001418:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	a903      	add	r1, sp, #12
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001422:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f7fe ff80 	bl	800032c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800142c:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	a903      	add	r1, sp, #12
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_GPIO_Init+0x8c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001432:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f7fe ff78 	bl	800032c <HAL_GPIO_Init>

}
 800143c:	b008      	add	sp, #32
 800143e:	bd10      	pop	{r4, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400

08001448 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001448:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800144a:	4815      	ldr	r0, [pc, #84]	; (80014a0 <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x2000090E;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_I2C1_Init+0x5c>)
 800144e:	4916      	ldr	r1, [pc, #88]	; (80014a8 <MX_I2C1_Init+0x60>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x2000090E;
 8001452:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001460:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001462:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001464:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001466:	f7ff f826 	bl	80004b6 <HAL_I2C_Init>
 800146a:	b118      	cbz	r0, 8001474 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800146c:	2142      	movs	r1, #66	; 0x42
 800146e:	480f      	ldr	r0, [pc, #60]	; (80014ac <MX_I2C1_Init+0x64>)
 8001470:	f000 fba4 	bl	8001bbc <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001474:	2100      	movs	r1, #0
 8001476:	480a      	ldr	r0, [pc, #40]	; (80014a0 <MX_I2C1_Init+0x58>)
 8001478:	f7ff f86e 	bl	8000558 <HAL_I2CEx_ConfigAnalogFilter>
 800147c:	b118      	cbz	r0, 8001486 <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800147e:	2149      	movs	r1, #73	; 0x49
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <MX_I2C1_Init+0x64>)
 8001482:	f000 fb9b 	bl	8001bbc <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001486:	2100      	movs	r1, #0
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_I2C1_Init+0x58>)
 800148a:	f7ff f88b 	bl	80005a4 <HAL_I2CEx_ConfigDigitalFilter>
 800148e:	b128      	cbz	r0, 800149c <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001490:	2150      	movs	r1, #80	; 0x50
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_I2C1_Init+0x64>)
  }

}
 8001494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001498:	f000 bb90 	b.w	8001bbc <_Error_Handler>
 800149c:	bd08      	pop	{r3, pc}
 800149e:	bf00      	nop
 80014a0:	20000028 	.word	0x20000028
 80014a4:	2000090e 	.word	0x2000090e
 80014a8:	40005400 	.word	0x40005400
 80014ac:	08002194 	.word	0x08002194

080014b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80014b2:	6802      	ldr	r2, [r0, #0]
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_I2C_MspInit+0x5c>)
 80014b6:	429a      	cmp	r2, r3
{
 80014b8:	b087      	sub	sp, #28
  if(i2cHandle->Instance==I2C1)
 80014ba:	d125      	bne.n	8001508 <HAL_I2C_MspInit+0x58>
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014bc:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c4:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c6:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	eb0d 0104 	add.w	r1, sp, r4
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f7fe ff27 	bl	800032c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014de:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	eb0d 0104 	add.w	r1, sp, r4
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e8:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ea:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ec:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ee:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f7fe ff1c 	bl	800032c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_I2C_MspInit+0x64>)
 80014f6:	69da      	ldr	r2, [r3, #28]
 80014f8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80014fc:	61da      	str	r2, [r3, #28]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001508:	b007      	add	sp, #28
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	40005400 	.word	0x40005400
 8001510:	48000400 	.word	0x48000400
 8001514:	40021000 	.word	0x40021000

08001518 <MX_IWDG_Init>:

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <MX_IWDG_Init+0x28>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <MX_IWDG_Init+0x2c>)
{
 800151c:	b508      	push	{r3, lr}
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 800151e:	2302      	movs	r3, #2
 8001520:	e880 000c 	stmia.w	r0, {r2, r3}
  hiwdg.Init.Window = 4095;
 8001524:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001528:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 800152a:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800152c:	f7ff f85f 	bl	80005ee <HAL_IWDG_Init>
 8001530:	b128      	cbz	r0, 800153e <MX_IWDG_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001532:	213b      	movs	r1, #59	; 0x3b
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_IWDG_Init+0x30>)
  }

}
 8001536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800153a:	f000 bb3f 	b.w	8001bbc <_Error_Handler>
 800153e:	bd08      	pop	{r3, pc}
 8001540:	20000074 	.word	0x20000074
 8001544:	40003000 	.word	0x40003000
 8001548:	080021a1 	.word	0x080021a1

0800154c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800154c:	b510      	push	{r4, lr}
 800154e:	b096      	sub	sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001550:	230b      	movs	r3, #11
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001552:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001554:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800155c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800155e:	2110      	movs	r1, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	2201      	movs	r2, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001562:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001564:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001566:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001568:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800156e:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001570:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001574:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f7ff f867 	bl	8000648 <HAL_RCC_OscConfig>
 800157a:	b100      	cbz	r0, 800157e <SystemClock_Config+0x32>
 800157c:	e7fe      	b.n	800157c <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157e:	230f      	movs	r3, #15
 8001580:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001582:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001584:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158a:	4621      	mov	r1, r4
 800158c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001590:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001592:	f7ff fafd 	bl	8000b90 <HAL_RCC_ClockConfig>
 8001596:	b100      	cbz	r0, 800159a <SystemClock_Config+0x4e>
 8001598:	e7fe      	b.n	8001598 <SystemClock_Config+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800159a:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800159c:	9008      	str	r0, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800159e:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80015a2:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	f7ff fbec 	bl	8000d80 <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4604      	mov	r4, r0
 80015aa:	b100      	cbz	r0, 80015ae <SystemClock_Config+0x62>
 80015ac:	e7fe      	b.n	80015ac <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80015ae:	f7ff fbb1 	bl	8000d14 <HAL_RCC_GetHCLKFreq>
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80015ba:	f7fe fe8f 	bl	80002dc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80015be:	2004      	movs	r0, #4
 80015c0:	f7fe fea2 	bl	8000308 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80015c4:	4622      	mov	r2, r4
 80015c6:	4621      	mov	r1, r4
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7fe fe52 	bl	8000274 <HAL_NVIC_SetPriority>
}
 80015d0:	b016      	add	sp, #88	; 0x58
 80015d2:	bd10      	pop	{r4, pc}

080015d4 <read_Ultrasonic>:

/* USER CODE BEGIN 4 */
void read_Ultrasonic(){
 80015d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	  	  //HAL_Delay(3);
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2101      	movs	r1, #1
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f7fe ff64 	bl	80004ac <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7fe fe23 	bl	8000230 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	4611      	mov	r1, r2
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f7fe ff5b 	bl	80004ac <HAL_GPIO_WritePin>
		  delayUs(20);
 80015f6:	2014      	movs	r0, #20
 80015f8:	f000 fb00 	bl	8001bfc <delayUs>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2101      	movs	r1, #1
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f7fe ff52 	bl	80004ac <HAL_GPIO_WritePin>
		  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f7fe ff46 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001614:	4dbd      	ldr	r5, [pc, #756]	; (800190c <read_Ultrasonic+0x338>)
		  start = getUs();
 8001616:	4ebe      	ldr	r6, [pc, #760]	; (8001910 <read_Ultrasonic+0x33c>)
		  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001618:	7028      	strb	r0, [r5, #0]
		  start = getUs();
 800161a:	f000 fad1 	bl	8001bc0 <getUs>
		  timeout=0;
 800161e:	4cbd      	ldr	r4, [pc, #756]	; (8001914 <read_Ultrasonic+0x340>)
		  start = getUs();
 8001620:	6030      	str	r0, [r6, #0]
		  timeout=0;
 8001622:	2300      	movs	r3, #0
 8001624:	6023      	str	r3, [r4, #0]
		  while(Echo==0 && timeout==0){
			  if(getUs()-start>2000){
				  timeout=1;
 8001626:	2701      	movs	r7, #1
		  while(Echo==0 && timeout==0){
 8001628:	782b      	ldrb	r3, [r5, #0]
 800162a:	b91b      	cbnz	r3, 8001634 <read_Ultrasonic+0x60>
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 817a 	beq.w	8001928 <read_Ultrasonic+0x354>
			  }
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
		  }
		  if(timeout==0){
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	b9e3      	cbnz	r3, 8001672 <read_Ultrasonic+0x9e>
			  timeout=0;
			  start = getUs();
 8001638:	f000 fac2 	bl	8001bc0 <getUs>
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
			  start = getUs();
 8001640:	6030      	str	r0, [r6, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f7fe ff2b 	bl	80004a0 <HAL_GPIO_ReadPin>
			  while(Echo==1 && timeout==0){
				  if(getUs()-start>20000){
 800164a:	f644 6820 	movw	r8, #20000	; 0x4e20
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 800164e:	7028      	strb	r0, [r5, #0]
			  while(Echo==1 && timeout==0){
 8001650:	782f      	ldrb	r7, [r5, #0]
 8001652:	2f01      	cmp	r7, #1
 8001654:	d103      	bne.n	800165e <read_Ultrasonic+0x8a>
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8175 	beq.w	8001948 <read_Ultrasonic+0x374>
					  timeout=1;
		           }
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
		      }
			  Duration[0]=getUs()-start;
 800165e:	f000 faaf 	bl	8001bc0 <getUs>
 8001662:	6833      	ldr	r3, [r6, #0]
 8001664:	4aac      	ldr	r2, [pc, #688]	; (8001918 <read_Ultrasonic+0x344>)
 8001666:	1ac3      	subs	r3, r0, r3
 8001668:	6013      	str	r3, [r2, #0]
		           if(timeout==1){
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	2a01      	cmp	r2, #1
 800166e:	f040 817a 	bne.w	8001966 <read_Ultrasonic+0x392>
		        	   Distance[0]=5000;
 8001672:	4baa      	ldr	r3, [pc, #680]	; (800191c <read_Ultrasonic+0x348>)
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	601a      	str	r2, [r3, #0]
		  }
		  else{
		  Distance[0]=5000;
		  }

		  HAL_IWDG_Refresh(&hiwdg);
 800167a:	48a9      	ldr	r0, [pc, #676]	; (8001920 <read_Ultrasonic+0x34c>)
		  timeout=0;
		  while(Echo==0 && timeout==0){
			  if(getUs()-start>2000){
				  timeout=1;
			  }
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 800167c:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8001924 <read_Ultrasonic+0x350>
		  HAL_IWDG_Refresh(&hiwdg);
 8001680:	f7fe ffdb 	bl	800063a <HAL_IWDG_Refresh>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8001684:	2200      	movs	r2, #0
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f7fe ff0e 	bl	80004ac <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f7fe fdcd 	bl	8000230 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8001696:	2201      	movs	r2, #1
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f7fe ff05 	bl	80004ac <HAL_GPIO_WritePin>
		  delayUs(20);
 80016a2:	2014      	movs	r0, #20
 80016a4:	f000 faaa 	bl	8001bfc <delayUs>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f7fe fefc 	bl	80004ac <HAL_GPIO_WritePin>
		  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 80016b4:	2108      	movs	r1, #8
 80016b6:	489b      	ldr	r0, [pc, #620]	; (8001924 <read_Ultrasonic+0x350>)
 80016b8:	f7fe fef2 	bl	80004a0 <HAL_GPIO_ReadPin>
 80016bc:	7028      	strb	r0, [r5, #0]
		  start = getUs();
 80016be:	f000 fa7f 	bl	8001bc0 <getUs>
		  timeout=0;
 80016c2:	2300      	movs	r3, #0
		  start = getUs();
 80016c4:	6030      	str	r0, [r6, #0]
		  timeout=0;
 80016c6:	6023      	str	r3, [r4, #0]
				  timeout=1;
 80016c8:	2701      	movs	r7, #1
		  while(Echo==0 && timeout==0){
 80016ca:	782b      	ldrb	r3, [r5, #0]
 80016cc:	b91b      	cbnz	r3, 80016d6 <read_Ultrasonic+0x102>
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8151 	beq.w	8001978 <read_Ultrasonic+0x3a4>
		  }
		  if(timeout==0){
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	b9e3      	cbnz	r3, 8001714 <read_Ultrasonic+0x140>
			  timeout=0;
			  start = getUs();
 80016da:	f000 fa71 	bl	8001bc0 <getUs>
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 80016de:	2108      	movs	r1, #8
			  start = getUs();
 80016e0:	6030      	str	r0, [r6, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 80016e2:	4890      	ldr	r0, [pc, #576]	; (8001924 <read_Ultrasonic+0x350>)
			  while(Echo==1 && timeout==0){
				  if(getUs()-start>20000){
					  timeout=1;
				  }
				  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 80016e4:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8001924 <read_Ultrasonic+0x350>
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 80016e8:	f7fe feda 	bl	80004a0 <HAL_GPIO_ReadPin>
				  if(getUs()-start>20000){
 80016ec:	f644 6820 	movw	r8, #20000	; 0x4e20
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 80016f0:	7028      	strb	r0, [r5, #0]
			  while(Echo==1 && timeout==0){
 80016f2:	782f      	ldrb	r7, [r5, #0]
 80016f4:	2f01      	cmp	r7, #1
 80016f6:	d103      	bne.n	8001700 <read_Ultrasonic+0x12c>
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 814b 	beq.w	8001996 <read_Ultrasonic+0x3c2>
			  }
			  Duration[3]=getUs()-start;
 8001700:	f000 fa5e 	bl	8001bc0 <getUs>
 8001704:	6833      	ldr	r3, [r6, #0]
 8001706:	4a84      	ldr	r2, [pc, #528]	; (8001918 <read_Ultrasonic+0x344>)
 8001708:	1ac3      	subs	r3, r0, r3
 800170a:	60d3      	str	r3, [r2, #12]
			  if(timeout==1){
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	2a01      	cmp	r2, #1
 8001710:	f040 814f 	bne.w	80019b2 <read_Ultrasonic+0x3de>
				  Distance[3]=5000;
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <read_Ultrasonic+0x348>)
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	60da      	str	r2, [r3, #12]
			  }
		  }
		  else{
			  Distance[3]=5000;
		  }
		  HAL_IWDG_Refresh(&hiwdg);
 800171c:	4880      	ldr	r0, [pc, #512]	; (8001920 <read_Ultrasonic+0x34c>)
 800171e:	f7fe ff8c 	bl	800063a <HAL_IWDG_Refresh>


		  //HAL_Delay(3);
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8001722:	2200      	movs	r2, #0
 8001724:	2110      	movs	r1, #16
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f7fe febf 	bl	80004ac <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f7fe fd7e 	bl	8000230 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8001734:	2201      	movs	r2, #1
 8001736:	2110      	movs	r1, #16
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f7fe feb6 	bl	80004ac <HAL_GPIO_WritePin>
		  delayUs(20);
 8001740:	2014      	movs	r0, #20
 8001742:	f000 fa5b 	bl	8001bfc <delayUs>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8001746:	2200      	movs	r2, #0
 8001748:	2110      	movs	r1, #16
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f7fe fead 	bl	80004ac <HAL_GPIO_WritePin>
		  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 8001752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f7fe fea1 	bl	80004a0 <HAL_GPIO_ReadPin>
 800175e:	7028      	strb	r0, [r5, #0]
		  start = getUs();
 8001760:	f000 fa2e 	bl	8001bc0 <getUs>
		  timeout=0;
 8001764:	2300      	movs	r3, #0
		  start = getUs();
 8001766:	6030      	str	r0, [r6, #0]
		  timeout=0;
 8001768:	6023      	str	r3, [r4, #0]
		  while(Echo==0 && timeout==0){
			  if(getUs()-start>2000){
				  timeout=1;
 800176a:	2701      	movs	r7, #1
		  while(Echo==0 && timeout==0){
 800176c:	782b      	ldrb	r3, [r5, #0]
 800176e:	b91b      	cbnz	r3, 8001778 <read_Ultrasonic+0x1a4>
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8126 	beq.w	80019c4 <read_Ultrasonic+0x3f0>
			  }
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
		  }
		  if(timeout==0){
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	b9e3      	cbnz	r3, 80017b6 <read_Ultrasonic+0x1e2>
			  timeout=0;
			  start = getUs();
 800177c:	f000 fa20 	bl	8001bc0 <getUs>
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			  start = getUs();
 8001784:	6030      	str	r0, [r6, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f7fe fe89 	bl	80004a0 <HAL_GPIO_ReadPin>
			  while(Echo==1 && timeout==0){
				  if(getUs()-start>20000){
 800178e:	f644 6820 	movw	r8, #20000	; 0x4e20
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 8001792:	7028      	strb	r0, [r5, #0]
			  while(Echo==1 && timeout==0){
 8001794:	782f      	ldrb	r7, [r5, #0]
 8001796:	2f01      	cmp	r7, #1
 8001798:	d103      	bne.n	80017a2 <read_Ultrasonic+0x1ce>
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8121 	beq.w	80019e4 <read_Ultrasonic+0x410>
					  timeout=1;
				  }
				  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
			  }
			  Duration[2]=getUs()-start;
 80017a2:	f000 fa0d 	bl	8001bc0 <getUs>
 80017a6:	6833      	ldr	r3, [r6, #0]
 80017a8:	4a5b      	ldr	r2, [pc, #364]	; (8001918 <read_Ultrasonic+0x344>)
 80017aa:	1ac3      	subs	r3, r0, r3
 80017ac:	6093      	str	r3, [r2, #8]
			  if(timeout==1){
 80017ae:	6822      	ldr	r2, [r4, #0]
 80017b0:	2a01      	cmp	r2, #1
 80017b2:	f040 8126 	bne.w	8001a02 <read_Ultrasonic+0x42e>
				  Distance[2]=5000;
 80017b6:	4b59      	ldr	r3, [pc, #356]	; (800191c <read_Ultrasonic+0x348>)
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	609a      	str	r2, [r3, #8]
			  }
		  }
		  else{
			  Distance[2]=5000;
		  }
		  HAL_IWDG_Refresh(&hiwdg);
 80017be:	4858      	ldr	r0, [pc, #352]	; (8001920 <read_Ultrasonic+0x34c>)
		  timeout=0;
		  while(Echo==0 && timeout==0){
			  if(getUs()-start>2000){
				  timeout=1;
			  }
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 80017c0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8001924 <read_Ultrasonic+0x350>
		  HAL_IWDG_Refresh(&hiwdg);
 80017c4:	f7fe ff39 	bl	800063a <HAL_IWDG_Refresh>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f7fe fe6c 	bl	80004ac <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7fe fd2b 	bl	8000230 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 80017da:	2201      	movs	r2, #1
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f7fe fe63 	bl	80004ac <HAL_GPIO_WritePin>
		  delayUs(20);
 80017e6:	2014      	movs	r0, #20
 80017e8:	f000 fa08 	bl	8001bfc <delayUs>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2140      	movs	r1, #64	; 0x40
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f7fe fe5a 	bl	80004ac <HAL_GPIO_WritePin>
		  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 80017f8:	2110      	movs	r1, #16
 80017fa:	484a      	ldr	r0, [pc, #296]	; (8001924 <read_Ultrasonic+0x350>)
 80017fc:	f7fe fe50 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001800:	7028      	strb	r0, [r5, #0]
		  start = getUs();
 8001802:	f000 f9dd 	bl	8001bc0 <getUs>
		  timeout=0;
 8001806:	2300      	movs	r3, #0
		  start = getUs();
 8001808:	6030      	str	r0, [r6, #0]
		  timeout=0;
 800180a:	6023      	str	r3, [r4, #0]
				  timeout=1;
 800180c:	2701      	movs	r7, #1
		  while(Echo==0 && timeout==0){
 800180e:	782b      	ldrb	r3, [r5, #0]
 8001810:	b91b      	cbnz	r3, 800181a <read_Ultrasonic+0x246>
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80fd 	beq.w	8001a14 <read_Ultrasonic+0x440>
		  }
		  if(timeout==0){
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	b9e3      	cbnz	r3, 8001858 <read_Ultrasonic+0x284>
			  timeout=0;
			  start = getUs();
 800181e:	f000 f9cf 	bl	8001bc0 <getUs>
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8001822:	2110      	movs	r1, #16
			  start = getUs();
 8001824:	6030      	str	r0, [r6, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8001826:	483f      	ldr	r0, [pc, #252]	; (8001924 <read_Ultrasonic+0x350>)
			  while(Echo==1 && timeout==0){
				  if(getUs()-start> 20000){
					  timeout=1;
				  }
				  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8001828:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001924 <read_Ultrasonic+0x350>
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 800182c:	f7fe fe38 	bl	80004a0 <HAL_GPIO_ReadPin>
				  if(getUs()-start> 20000){
 8001830:	f644 6820 	movw	r8, #20000	; 0x4e20
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8001834:	7028      	strb	r0, [r5, #0]
			  while(Echo==1 && timeout==0){
 8001836:	782f      	ldrb	r7, [r5, #0]
 8001838:	2f01      	cmp	r7, #1
 800183a:	d103      	bne.n	8001844 <read_Ultrasonic+0x270>
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80f7 	beq.w	8001a32 <read_Ultrasonic+0x45e>
			  }
			  Duration[4]=getUs()-start;
 8001844:	f000 f9bc 	bl	8001bc0 <getUs>
 8001848:	6833      	ldr	r3, [r6, #0]
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <read_Ultrasonic+0x344>)
 800184c:	1ac3      	subs	r3, r0, r3
 800184e:	6113      	str	r3, [r2, #16]
			  if(timeout==1 ){
 8001850:	6822      	ldr	r2, [r4, #0]
 8001852:	2a01      	cmp	r2, #1
 8001854:	f040 80fb 	bne.w	8001a4e <read_Ultrasonic+0x47a>
				  Distance[4]=5000;
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <read_Ultrasonic+0x348>)
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	611a      	str	r2, [r3, #16]
			  }
		  }
		  else{
			  Distance[4]=5000;
		  }
		  HAL_IWDG_Refresh(&hiwdg);
 8001860:	482f      	ldr	r0, [pc, #188]	; (8001920 <read_Ultrasonic+0x34c>)
 8001862:	f7fe feea 	bl	800063a <HAL_IWDG_Refresh>


		  //HAL_Delay(3);
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 8001866:	2200      	movs	r2, #0
 8001868:	2102      	movs	r1, #2
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f7fe fe1d 	bl	80004ac <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001872:	2001      	movs	r0, #1
 8001874:	f7fe fcdc 	bl	8000230 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
 8001878:	2201      	movs	r2, #1
 800187a:	2102      	movs	r1, #2
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f7fe fe14 	bl	80004ac <HAL_GPIO_WritePin>
		  delayUs(20);
 8001884:	2014      	movs	r0, #20
 8001886:	f000 f9b9 	bl	8001bfc <delayUs>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 800188a:	2200      	movs	r2, #0
 800188c:	2102      	movs	r1, #2
 800188e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001892:	f7fe fe0b 	bl	80004ac <HAL_GPIO_WritePin>
		  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
 8001896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f7fe fdff 	bl	80004a0 <HAL_GPIO_ReadPin>
 80018a2:	7028      	strb	r0, [r5, #0]
		  start = getUs();
 80018a4:	f000 f98c 	bl	8001bc0 <getUs>
		  timeout=0;
 80018a8:	2300      	movs	r3, #0
		  start = getUs();
 80018aa:	6030      	str	r0, [r6, #0]
		  timeout=0;
 80018ac:	6023      	str	r3, [r4, #0]
		  while(Echo==0 && timeout==0){
			  if(getUs()-start>2000){
				  timeout=1;
 80018ae:	2701      	movs	r7, #1
		  while(Echo==0 && timeout==0){
 80018b0:	782b      	ldrb	r3, [r5, #0]
 80018b2:	b91b      	cbnz	r3, 80018bc <read_Ultrasonic+0x2e8>
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80d2 	beq.w	8001a60 <read_Ultrasonic+0x48c>
			  }
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
		  }
		  if(timeout==0){
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	b9e3      	cbnz	r3, 80018fa <read_Ultrasonic+0x326>
			  timeout=0;
			  start = getUs();
 80018c0:	f000 f97e 	bl	8001bc0 <getUs>
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
 80018c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
			  start = getUs();
 80018c8:	6030      	str	r0, [r6, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ce:	f7fe fde7 	bl	80004a0 <HAL_GPIO_ReadPin>
			  while(Echo==1 && timeout==0){
				  if(getUs()-start>20000){
 80018d2:	f644 6820 	movw	r8, #20000	; 0x4e20
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
 80018d6:	7028      	strb	r0, [r5, #0]
			  while(Echo==1 && timeout==0){
 80018d8:	782f      	ldrb	r7, [r5, #0]
 80018da:	2f01      	cmp	r7, #1
 80018dc:	d103      	bne.n	80018e6 <read_Ultrasonic+0x312>
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80cd 	beq.w	8001a80 <read_Ultrasonic+0x4ac>
					  timeout=1;
				  }
				  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
			  }
			  Duration[1]=getUs()-start;
 80018e6:	f000 f96b 	bl	8001bc0 <getUs>
 80018ea:	6833      	ldr	r3, [r6, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <read_Ultrasonic+0x344>)
 80018ee:	1ac3      	subs	r3, r0, r3
 80018f0:	6053      	str	r3, [r2, #4]
			  if(timeout==1){
 80018f2:	6822      	ldr	r2, [r4, #0]
 80018f4:	2a01      	cmp	r2, #1
 80018f6:	f040 80d2 	bne.w	8001a9e <read_Ultrasonic+0x4ca>
				  Distance[1]=5000;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <read_Ultrasonic+0x348>)
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	605a      	str	r2, [r3, #4]
			  }
		  }
		  else{
			  Distance[1]=5000;
		  }
		  HAL_IWDG_Refresh(&hiwdg);
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <read_Ultrasonic+0x34c>)


}
 8001904:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		  HAL_IWDG_Refresh(&hiwdg);
 8001908:	f7fe be97 	b.w	800063a <HAL_IWDG_Refresh>
 800190c:	200000ac 	.word	0x200000ac
 8001910:	200000cc 	.word	0x200000cc
 8001914:	200000c8 	.word	0x200000c8
 8001918:	20000084 	.word	0x20000084
 800191c:	20000098 	.word	0x20000098
 8001920:	20000074 	.word	0x20000074
 8001924:	48000400 	.word	0x48000400
			  if(getUs()-start>2000){
 8001928:	f000 f94a 	bl	8001bc0 <getUs>
 800192c:	6833      	ldr	r3, [r6, #0]
 800192e:	1ac0      	subs	r0, r0, r3
 8001930:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
				  timeout=1;
 800193c:	bf88      	it	hi
 800193e:	6027      	strhi	r7, [r4, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001940:	f7fe fdae 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001944:	7028      	strb	r0, [r5, #0]
 8001946:	e66f      	b.n	8001628 <read_Ultrasonic+0x54>
				  if(getUs()-start>20000){
 8001948:	f000 f93a 	bl	8001bc0 <getUs>
 800194c:	6833      	ldr	r3, [r6, #0]
 800194e:	1ac0      	subs	r0, r0, r3
 8001950:	4540      	cmp	r0, r8
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
					  timeout=1;
 800195a:	bf88      	it	hi
 800195c:	6027      	strhi	r7, [r4, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 800195e:	f7fe fd9f 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001962:	7028      	strb	r0, [r5, #0]
 8001964:	e674      	b.n	8001650 <read_Ultrasonic+0x7c>
		        	   Distance[0] = Duration[0]*340*100/1000000/2;
 8001966:	f248 40d0 	movw	r0, #34000	; 0x84d0
 800196a:	4358      	muls	r0, r3
 800196c:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <read_Ultrasonic+0x4dc>)
 800196e:	fb90 f0f3 	sdiv	r0, r0, r3
 8001972:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <read_Ultrasonic+0x4e0>)
 8001974:	6018      	str	r0, [r3, #0]
 8001976:	e680      	b.n	800167a <read_Ultrasonic+0xa6>
			  if(getUs()-start>2000){
 8001978:	f000 f922 	bl	8001bc0 <getUs>
 800197c:	6833      	ldr	r3, [r6, #0]
 800197e:	1ac0      	subs	r0, r0, r3
 8001980:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8001984:	f04f 0108 	mov.w	r1, #8
 8001988:	4640      	mov	r0, r8
				  timeout=1;
 800198a:	bf88      	it	hi
 800198c:	6027      	strhi	r7, [r4, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 800198e:	f7fe fd87 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001992:	7028      	strb	r0, [r5, #0]
 8001994:	e699      	b.n	80016ca <read_Ultrasonic+0xf6>
				  if(getUs()-start>20000){
 8001996:	f000 f913 	bl	8001bc0 <getUs>
 800199a:	6833      	ldr	r3, [r6, #0]
 800199c:	1ac0      	subs	r0, r0, r3
 800199e:	4540      	cmp	r0, r8
				  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 80019a0:	f04f 0108 	mov.w	r1, #8
 80019a4:	4648      	mov	r0, r9
					  timeout=1;
 80019a6:	bf88      	it	hi
 80019a8:	6027      	strhi	r7, [r4, #0]
				  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 80019aa:	f7fe fd79 	bl	80004a0 <HAL_GPIO_ReadPin>
 80019ae:	7028      	strb	r0, [r5, #0]
 80019b0:	e69f      	b.n	80016f2 <read_Ultrasonic+0x11e>
				  Distance[3] = Duration[3]*340*100/1000000/2;
 80019b2:	f248 40d0 	movw	r0, #34000	; 0x84d0
 80019b6:	4358      	muls	r0, r3
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <read_Ultrasonic+0x4dc>)
 80019ba:	fb90 f0f3 	sdiv	r0, r0, r3
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <read_Ultrasonic+0x4e0>)
 80019c0:	60d8      	str	r0, [r3, #12]
 80019c2:	e6ab      	b.n	800171c <read_Ultrasonic+0x148>
			  if(getUs()-start>2000){
 80019c4:	f000 f8fc 	bl	8001bc0 <getUs>
 80019c8:	6833      	ldr	r3, [r6, #0]
 80019ca:	1ac0      	subs	r0, r0, r3
 80019cc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 80019d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
				  timeout=1;
 80019d8:	bf88      	it	hi
 80019da:	6027      	strhi	r7, [r4, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 80019dc:	f7fe fd60 	bl	80004a0 <HAL_GPIO_ReadPin>
 80019e0:	7028      	strb	r0, [r5, #0]
 80019e2:	e6c3      	b.n	800176c <read_Ultrasonic+0x198>
				  if(getUs()-start>20000){
 80019e4:	f000 f8ec 	bl	8001bc0 <getUs>
 80019e8:	6833      	ldr	r3, [r6, #0]
 80019ea:	1ac0      	subs	r0, r0, r3
 80019ec:	4540      	cmp	r0, r8
				  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 80019ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
					  timeout=1;
 80019f6:	bf88      	it	hi
 80019f8:	6027      	strhi	r7, [r4, #0]
				  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 80019fa:	f7fe fd51 	bl	80004a0 <HAL_GPIO_ReadPin>
 80019fe:	7028      	strb	r0, [r5, #0]
 8001a00:	e6c8      	b.n	8001794 <read_Ultrasonic+0x1c0>
				  Distance[2] = Duration[2]*340*100/1000000/2;
 8001a02:	f248 40d0 	movw	r0, #34000	; 0x84d0
 8001a06:	4358      	muls	r0, r3
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <read_Ultrasonic+0x4dc>)
 8001a0a:	fb90 f0f3 	sdiv	r0, r0, r3
 8001a0e:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <read_Ultrasonic+0x4e0>)
 8001a10:	6098      	str	r0, [r3, #8]
 8001a12:	e6d4      	b.n	80017be <read_Ultrasonic+0x1ea>
			  if(getUs()-start>2000){
 8001a14:	f000 f8d4 	bl	8001bc0 <getUs>
 8001a18:	6833      	ldr	r3, [r6, #0]
 8001a1a:	1ac0      	subs	r0, r0, r3
 8001a1c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8001a20:	f04f 0110 	mov.w	r1, #16
 8001a24:	4640      	mov	r0, r8
				  timeout=1;
 8001a26:	bf88      	it	hi
 8001a28:	6027      	strhi	r7, [r4, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8001a2a:	f7fe fd39 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001a2e:	7028      	strb	r0, [r5, #0]
 8001a30:	e6ed      	b.n	800180e <read_Ultrasonic+0x23a>
				  if(getUs()-start> 20000){
 8001a32:	f000 f8c5 	bl	8001bc0 <getUs>
 8001a36:	6833      	ldr	r3, [r6, #0]
 8001a38:	1ac0      	subs	r0, r0, r3
 8001a3a:	4540      	cmp	r0, r8
				  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8001a3c:	f04f 0110 	mov.w	r1, #16
 8001a40:	4648      	mov	r0, r9
					  timeout=1;
 8001a42:	bf88      	it	hi
 8001a44:	6027      	strhi	r7, [r4, #0]
				  Echo=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8001a46:	f7fe fd2b 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001a4a:	7028      	strb	r0, [r5, #0]
 8001a4c:	e6f3      	b.n	8001836 <read_Ultrasonic+0x262>
				  Distance[4] = Duration[4]*340*100/1000000/2;
 8001a4e:	f248 40d0 	movw	r0, #34000	; 0x84d0
 8001a52:	4358      	muls	r0, r3
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <read_Ultrasonic+0x4dc>)
 8001a56:	fb90 f0f3 	sdiv	r0, r0, r3
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <read_Ultrasonic+0x4e0>)
 8001a5c:	6118      	str	r0, [r3, #16]
 8001a5e:	e6ff      	b.n	8001860 <read_Ultrasonic+0x28c>
			  if(getUs()-start>2000){
 8001a60:	f000 f8ae 	bl	8001bc0 <getUs>
 8001a64:	6833      	ldr	r3, [r6, #0]
 8001a66:	1ac0      	subs	r0, r0, r3
 8001a68:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
 8001a6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
				  timeout=1;
 8001a74:	bf88      	it	hi
 8001a76:	6027      	strhi	r7, [r4, #0]
			  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
 8001a78:	f7fe fd12 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001a7c:	7028      	strb	r0, [r5, #0]
 8001a7e:	e717      	b.n	80018b0 <read_Ultrasonic+0x2dc>
				  if(getUs()-start>20000){
 8001a80:	f000 f89e 	bl	8001bc0 <getUs>
 8001a84:	6833      	ldr	r3, [r6, #0]
 8001a86:	1ac0      	subs	r0, r0, r3
 8001a88:	4540      	cmp	r0, r8
				  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
 8001a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
					  timeout=1;
 8001a92:	bf88      	it	hi
 8001a94:	6027      	strhi	r7, [r4, #0]
				  Echo=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
 8001a96:	f7fe fd03 	bl	80004a0 <HAL_GPIO_ReadPin>
 8001a9a:	7028      	strb	r0, [r5, #0]
 8001a9c:	e71c      	b.n	80018d8 <read_Ultrasonic+0x304>
				  Distance[1] = Duration[1]*340*100/1000000/2;
 8001a9e:	f248 40d0 	movw	r0, #34000	; 0x84d0
 8001aa2:	4358      	muls	r0, r3
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <read_Ultrasonic+0x4dc>)
 8001aa6:	fb90 f0f3 	sdiv	r0, r0, r3
 8001aaa:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <read_Ultrasonic+0x4e0>)
 8001aac:	6058      	str	r0, [r3, #4]
 8001aae:	e728      	b.n	8001902 <read_Ultrasonic+0x32e>
 8001ab0:	001e8480 	.word	0x001e8480
 8001ab4:	20000098 	.word	0x20000098

08001ab8 <main>:
{
 8001ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_Init();
 8001abc:	f7fe fb98 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 8001ac0:	f7ff fd44 	bl	800154c <SystemClock_Config>
  MX_GPIO_Init();
 8001ac4:	f7ff fc78 	bl	80013b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ac8:	f000 f982 	bl	8001dd0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001acc:	f7ff fcbc 	bl	8001448 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ad0:	f000 f95c 	bl	8001d8c <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8001ad4:	f7ff fd20 	bl	8001518 <MX_IWDG_Init>
  MX_TIM6_Init();
 8001ad8:	f000 f920 	bl	8001d1c <MX_TIM6_Init>
	init_xpritf(&huart2);
 8001adc:	482d      	ldr	r0, [pc, #180]	; (8001b94 <main+0xdc>)
	  if(Distance[3]==0){Distance[3]=Distance_temp[3];}
 8001ade:	4f2e      	ldr	r7, [pc, #184]	; (8001b98 <main+0xe0>)
	  HAL_IWDG_Refresh(&hiwdg);
 8001ae0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001ba4 <main+0xec>
	init_xpritf(&huart2);
 8001ae4:	f000 f9ce 	bl	8001e84 <init_xpritf>
	xdev_out(uart_putc);
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <main+0xe4>)
 8001aea:	4a2d      	ldr	r2, [pc, #180]	; (8001ba0 <main+0xe8>)
	HAL_IWDG_Refresh(&hiwdg);
 8001aec:	482d      	ldr	r0, [pc, #180]	; (8001ba4 <main+0xec>)
	xdev_out(uart_putc);
 8001aee:	601a      	str	r2, [r3, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8001af0:	f7fe fda3 	bl	800063a <HAL_IWDG_Refresh>
	  if(Distance[3]==0){Distance[3]=Distance_temp[3];}
 8001af4:	4c2c      	ldr	r4, [pc, #176]	; (8001ba8 <main+0xf0>)
	  read_Ultrasonic();
 8001af6:	f7ff fd6d 	bl	80015d4 <read_Ultrasonic>
	  if(Distance[3]==0){Distance[3]=Distance_temp[3];}
 8001afa:	68e3      	ldr	r3, [r4, #12]
 8001afc:	4626      	mov	r6, r4
 8001afe:	b90b      	cbnz	r3, 8001b04 <main+0x4c>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	60e3      	str	r3, [r4, #12]
{
 8001b04:	2300      	movs	r3, #0
	  	 if(Distance[i]==5000){Distance[i]=Distance_temp[i];}
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8001b0e:	4291      	cmp	r1, r2
 8001b10:	bf04      	itt	eq
 8001b12:	f857 1023 	ldreq.w	r1, [r7, r3, lsl #2]
 8001b16:	f846 1023 	streq.w	r1, [r6, r3, lsl #2]
	  for(int i=0;i<5;i++){
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d1f4      	bne.n	8001b0a <main+0x52>
	  xprintf(" [%d]=%d",i,Distance[i]);
 8001b20:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8001bb8 <main+0x100>
 8001b24:	2500      	movs	r5, #0
 8001b26:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	4648      	mov	r0, r9
	  for(int i=0;i<5;i++){
 8001b2e:	3501      	adds	r5, #1
	  xprintf(" [%d]=%d",i,Distance[i]);
 8001b30:	f000 fab6 	bl	80020a0 <xprintf>
	  for(int i=0;i<5;i++){
 8001b34:	2d05      	cmp	r5, #5
 8001b36:	d1f6      	bne.n	8001b26 <main+0x6e>
	  xprintf("\r\n");
 8001b38:	481c      	ldr	r0, [pc, #112]	; (8001bac <main+0xf4>)
 8001b3a:	f000 fab1 	bl	80020a0 <xprintf>
	  HAL_IWDG_Refresh(&hiwdg);
 8001b3e:	4640      	mov	r0, r8
 8001b40:	f7fe fd7b 	bl	800063a <HAL_IWDG_Refresh>
	  Txbuf[0]=253;
 8001b44:	491a      	ldr	r1, [pc, #104]	; (8001bb0 <main+0xf8>)
	  HAL_UART_Transmit(&huart1,(uint8_t*)Txbuf,11,0x0f);
 8001b46:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <main+0xfc>)
	  Txbuf[0]=253;
 8001b48:	23fd      	movs	r3, #253	; 0xfd
 8001b4a:	700b      	strb	r3, [r1, #0]
	  Txbuf[1]= (uint8_t)( Distance[0] & 0b0000000011111111);
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	704b      	strb	r3, [r1, #1]
	  Txbuf[2]= (uint8_t)((Distance[0] & 0b1111111100000000)>>8);
 8001b50:	121b      	asrs	r3, r3, #8
 8001b52:	708b      	strb	r3, [r1, #2]
	  Txbuf[3]= (uint8_t)( Distance[1] & 0b0000000011111111);
 8001b54:	6863      	ldr	r3, [r4, #4]
 8001b56:	70cb      	strb	r3, [r1, #3]
	  Txbuf[4]= (uint8_t)((Distance[1] & 0b1111111100000000)>>8);
 8001b58:	121b      	asrs	r3, r3, #8
 8001b5a:	710b      	strb	r3, [r1, #4]
	  Txbuf[5]= (uint8_t)( Distance[2] & 0b0000000011111111);
 8001b5c:	68a3      	ldr	r3, [r4, #8]
 8001b5e:	714b      	strb	r3, [r1, #5]
	  Txbuf[6]= (uint8_t)((Distance[2] & 0b1111111100000000)>>8);
 8001b60:	121b      	asrs	r3, r3, #8
 8001b62:	718b      	strb	r3, [r1, #6]
	  Txbuf[7]= (uint8_t)( Distance[3] & 0b0000000011111111);
 8001b64:	68e3      	ldr	r3, [r4, #12]
 8001b66:	71cb      	strb	r3, [r1, #7]
	  Txbuf[8]= (uint8_t)((Distance[3] & 0b1111111100000000)>>8);
 8001b68:	121b      	asrs	r3, r3, #8
 8001b6a:	720b      	strb	r3, [r1, #8]
	  Txbuf[9]= (uint8_t)( Distance[4] & 0b0000000011111111);
 8001b6c:	6923      	ldr	r3, [r4, #16]
 8001b6e:	724b      	strb	r3, [r1, #9]
	  Txbuf[10]=(uint8_t)((Distance[4] & 0b1111111100000000)>>8);
 8001b70:	121b      	asrs	r3, r3, #8
 8001b72:	728b      	strb	r3, [r1, #10]
	  HAL_UART_Transmit(&huart1,(uint8_t*)Txbuf,11,0x0f);
 8001b74:	220b      	movs	r2, #11
 8001b76:	230f      	movs	r3, #15
 8001b78:	f7ff fb61 	bl	800123e <HAL_UART_Transmit>
	  HAL_IWDG_Refresh(&hiwdg);
 8001b7c:	4640      	mov	r0, r8
 8001b7e:	f7fe fd5c 	bl	800063a <HAL_IWDG_Refresh>
	  for(int i=0;i<5;i++){
 8001b82:	2300      	movs	r3, #0
		  Distance_temp[i]=Distance[i];
 8001b84:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8001b88:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	  for(int i=0;i<5;i++){
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d1f8      	bne.n	8001b84 <main+0xcc>
 8001b92:	e7af      	b.n	8001af4 <main+0x3c>
 8001b94:	2000018c 	.word	0x2000018c
 8001b98:	200000b4 	.word	0x200000b4
 8001b9c:	20000200 	.word	0x20000200
 8001ba0:	08001e91 	.word	0x08001e91
 8001ba4:	20000074 	.word	0x20000074
 8001ba8:	20000098 	.word	0x20000098
 8001bac:	080021b8 	.word	0x080021b8
 8001bb0:	200000d0 	.word	0x200000d0
 8001bb4:	2000011c 	.word	0x2000011c
 8001bb8:	080021af 	.word	0x080021af

08001bbc <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001bbc:	e7fe      	b.n	8001bbc <_Error_Handler>
	...

08001bc0 <getUs>:
 */
#include "microsectimer.h"



uint32_t getUs(void) {
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001bc2:	f7fe ffb3 	bl	8000b2c <HAL_RCC_GetSysClockFreq>
register uint32_t ms, cycle_cnt;
do {
ms = HAL_GetTick();
cycle_cnt = SysTick->VAL;
 8001bc6:	4f0b      	ldr	r7, [pc, #44]	; (8001bf4 <getUs+0x34>)
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001bc8:	4c0b      	ldr	r4, [pc, #44]	; (8001bf8 <getUs+0x38>)
 8001bca:	fbb0 f4f4 	udiv	r4, r0, r4
ms = HAL_GetTick();
 8001bce:	f7fe fb29 	bl	8000224 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 8001bd2:	68be      	ldr	r6, [r7, #8]
ms = HAL_GetTick();
 8001bd4:	4605      	mov	r5, r0
}
while (ms != HAL_GetTick());
 8001bd6:	f7fe fb25 	bl	8000224 <HAL_GetTick>
 8001bda:	4285      	cmp	r5, r0
 8001bdc:	d1f7      	bne.n	8001bce <getUs+0xe>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	fb03 f004 	mul.w	r0, r3, r4
 8001be6:	1b80      	subs	r0, r0, r6
 8001be8:	fbb0 f0f4 	udiv	r0, r0, r4
}
 8001bec:	fb03 0005 	mla	r0, r3, r5, r0
 8001bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010
 8001bf8:	000f4240 	.word	0x000f4240

08001bfc <delayUs>:

void delayUs(uint16_t micros) {
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4604      	mov	r4, r0
uint32_t start = getUs();
 8001c00:	f7ff ffde 	bl	8001bc0 <getUs>
 8001c04:	4605      	mov	r5, r0
while (getUs()-start < (uint32_t) micros) {
 8001c06:	f7ff ffdb 	bl	8001bc0 <getUs>
 8001c0a:	1b40      	subs	r0, r0, r5
 8001c0c:	42a0      	cmp	r0, r4
 8001c0e:	d300      	bcc.n	8001c12 <delayUs+0x16>
asm("nop");
}
}
 8001c10:	bd38      	pop	{r3, r4, r5, pc}
asm("nop");
 8001c12:	bf00      	nop
 8001c14:	e7f7      	b.n	8001c06 <delayUs+0xa>
	...

08001c18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_MspInit+0x78>)
{
 8001c1a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	619a      	str	r2, [r3, #24]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	f7fe fb0e 	bl	8000250 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	4611      	mov	r1, r2
 8001c38:	f06f 000b 	mvn.w	r0, #11
 8001c3c:	f7fe fb1a 	bl	8000274 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	4611      	mov	r1, r2
 8001c44:	f06f 000a 	mvn.w	r0, #10
 8001c48:	f7fe fb14 	bl	8000274 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4611      	mov	r1, r2
 8001c50:	f06f 0009 	mvn.w	r0, #9
 8001c54:	f7fe fb0e 	bl	8000274 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	f06f 0004 	mvn.w	r0, #4
 8001c60:	f7fe fb08 	bl	8000274 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	4611      	mov	r1, r2
 8001c68:	f06f 0003 	mvn.w	r0, #3
 8001c6c:	f7fe fb02 	bl	8000274 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	4611      	mov	r1, r2
 8001c74:	f06f 0001 	mvn.w	r0, #1
 8001c78:	f7fe fafc 	bl	8000274 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4611      	mov	r1, r2
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7fe faf6 	bl	8000274 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c88:	b003      	add	sp, #12
 8001c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000

08001c94 <NMI_Handler>:
 8001c94:	4770      	bx	lr

08001c96 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler>

08001c98 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001c98:	e7fe      	b.n	8001c98 <MemManage_Handler>

08001c9a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler>

08001c9c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001c9c:	e7fe      	b.n	8001c9c <UsageFault_Handler>

08001c9e <SVC_Handler>:
 8001c9e:	4770      	bx	lr

08001ca0 <DebugMon_Handler>:
 8001ca0:	4770      	bx	lr

08001ca2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca6:	f7fe fab5 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001cae:	f7fe bb38 	b.w	8000322 <HAL_SYSTICK_IRQHandler>
	...

08001cb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4915      	ldr	r1, [pc, #84]	; (8001d0c <SystemInit+0x58>)
 8001cb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <SystemInit+0x5c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001ccc:	6858      	ldr	r0, [r3, #4]
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <SystemInit+0x60>)
 8001cd0:	4002      	ands	r2, r0
 8001cd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cde:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001cee:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf2:	f022 020f 	bic.w	r2, r2, #15
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <SystemInit+0x64>)
 8001cfc:	4002      	ands	r2, r0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d08:	608b      	str	r3, [r1, #8]
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	f87fc00c 	.word	0xf87fc00c
 8001d18:	ff00fccc 	.word	0xff00fccc

08001d1c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8001d1e:	480e      	ldr	r0, [pc, #56]	; (8001d58 <MX_TIM6_Init+0x3c>)
  htim6.Init.Prescaler = 0;
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_TIM6_Init+0x40>)
 8001d22:	2400      	movs	r4, #0
 8001d24:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 0;
 8001d2a:	60c4      	str	r4, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d2e:	f7ff f91f 	bl	8000f70 <HAL_TIM_Base_Init>
 8001d32:	b118      	cbz	r0, 8001d3c <MX_TIM6_Init+0x20>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d34:	213d      	movs	r1, #61	; 0x3d
 8001d36:	480a      	ldr	r0, [pc, #40]	; (8001d60 <MX_TIM6_Init+0x44>)
 8001d38:	f7ff ff40 	bl	8001bbc <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d3c:	a901      	add	r1, sp, #4
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM6_Init+0x3c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d40:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d44:	f7ff f92e 	bl	8000fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	b118      	cbz	r0, 8001d52 <MX_TIM6_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d4a:	2144      	movs	r1, #68	; 0x44
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_TIM6_Init+0x44>)
 8001d4e:	f7ff ff35 	bl	8001bbc <_Error_Handler>
  }

}
 8001d52:	b004      	add	sp, #16
 8001d54:	bd10      	pop	{r4, pc}
 8001d56:	bf00      	nop
 8001d58:	200000dc 	.word	0x200000dc
 8001d5c:	40001000 	.word	0x40001000
 8001d60:	080021d3 	.word	0x080021d3

08001d64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8001d64:	6802      	ldr	r2, [r0, #0]
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_TIM_Base_MspInit+0x24>)
 8001d68:	429a      	cmp	r2, r3
{
 8001d6a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 8001d6c:	d10a      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d6e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	f042 0210 	orr.w	r2, r2, #16
 8001d78:	61da      	str	r2, [r3, #28]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d84:	b002      	add	sp, #8
 8001d86:	4770      	bx	lr
 8001d88:	40001000 	.word	0x40001000

08001d8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d8c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <MX_USART1_UART_Init+0x3c>)
 8001d92:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001d96:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d9a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da0:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001da2:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001daa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dac:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dae:	f7ff fad1 	bl	8001354 <HAL_UART_Init>
 8001db2:	b128      	cbz	r0, 8001dc0 <MX_USART1_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001db4:	2145      	movs	r1, #69	; 0x45
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_USART1_UART_Init+0x40>)
  }

}
 8001db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001dbc:	f7ff befe 	b.w	8001bbc <_Error_Handler>
 8001dc0:	bd08      	pop	{r3, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000011c 	.word	0x2000011c
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	080021e0 	.word	0x080021e0

08001dd0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dd0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <MX_USART2_UART_Init+0x3c>)
 8001dd6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001dda:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dde:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001de0:	2300      	movs	r3, #0
 8001de2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001de6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dee:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df2:	f7ff faaf 	bl	8001354 <HAL_UART_Init>
 8001df6:	b128      	cbz	r0, 8001e04 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001df8:	215a      	movs	r1, #90	; 0x5a
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_USART2_UART_Init+0x40>)
  }

}
 8001dfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001e00:	f7ff bedc 	b.w	8001bbc <_Error_Handler>
 8001e04:	bd08      	pop	{r3, pc}
 8001e06:	bf00      	nop
 8001e08:	2000018c 	.word	0x2000018c
 8001e0c:	40004400 	.word	0x40004400
 8001e10:	080021e0 	.word	0x080021e0

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e14:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8001e16:	6803      	ldr	r3, [r0, #0]
 8001e18:	4a17      	ldr	r2, [pc, #92]	; (8001e78 <HAL_UART_MspInit+0x64>)
 8001e1a:	4293      	cmp	r3, r2
{
 8001e1c:	b089      	sub	sp, #36	; 0x24
  if(uartHandle->Instance==USART1)
 8001e1e:	d11c      	bne.n	8001e5a <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_UART_MspInit+0x68>)
 8001e22:	699a      	ldr	r2, [r3, #24]
 8001e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e48:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f7fe fa6c 	bl	800032c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e54:	b009      	add	sp, #36	; 0x24
 8001e56:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(uartHandle->Instance==USART2)
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_UART_MspInit+0x6c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d1f9      	bne.n	8001e54 <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_UART_MspInit+0x68>)
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e68:	61da      	str	r2, [r3, #28]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e74:	230c      	movs	r3, #12
 8001e76:	e7df      	b.n	8001e38 <HAL_UART_MspInit+0x24>
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40004400 	.word	0x40004400

08001e84 <init_xpritf>:
/* Put a character                              */
/*----------------------------------------------*/


void init_xpritf(UART_HandleTypeDef *handler){
	huart_xprintf = handler;
 8001e84:	4b01      	ldr	r3, [pc, #4]	; (8001e8c <init_xpritf+0x8>)
 8001e86:	6018      	str	r0, [r3, #0]
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	200000b0 	.word	0x200000b0

08001e90 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 8001e90:	b507      	push	{r0, r1, r2, lr}
	 char buf[1];
	 buf[0] = c;
 8001e92:	a902      	add	r1, sp, #8
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8001e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
	 buf[0] = c;
 8001e98:	f801 0d04 	strb.w	r0, [r1, #-4]!
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8001e9c:	4803      	ldr	r0, [pc, #12]	; (8001eac <uart_putc+0x1c>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	6800      	ldr	r0, [r0, #0]
 8001ea2:	f7ff f9cc 	bl	800123e <HAL_UART_Transmit>
	}
 8001ea6:	b003      	add	sp, #12
 8001ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eac:	200000b0 	.word	0x200000b0

08001eb0 <xputc>:
	    }
	}

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8001eb0:	280a      	cmp	r0, #10
{
 8001eb2:	b510      	push	{r4, lr}
 8001eb4:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8001eb6:	d102      	bne.n	8001ebe <xputc+0xe>
 8001eb8:	200d      	movs	r0, #13
 8001eba:	f7ff fff9 	bl	8001eb0 <xputc>

	if (outptr) {
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <xputc+0x2c>)
 8001ec0:	6813      	ldr	r3, [r2, #0]
 8001ec2:	b11b      	cbz	r3, 8001ecc <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 8001ec4:	1c59      	adds	r1, r3, #1
 8001ec6:	701c      	strb	r4, [r3, #0]
 8001ec8:	6011      	str	r1, [r2, #0]
		return;
 8001eca:	bd10      	pop	{r4, pc}
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <xputc+0x30>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b11b      	cbz	r3, 8001eda <xputc+0x2a>
 8001ed2:	4620      	mov	r0, r4
}
 8001ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (xfunc_out) xfunc_out((unsigned char)c);
 8001ed8:	4718      	bx	r3
 8001eda:	bd10      	pop	{r4, pc}
 8001edc:	20000020 	.word	0x20000020
 8001ee0:	20000200 	.word	0x20000200

08001ee4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	1e44      	subs	r4, r0, #1
	while (*str)
 8001ee8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001eec:	b900      	cbnz	r0, 8001ef0 <xputs+0xc>
		xputc(*str++);
}
 8001eee:	bd10      	pop	{r4, pc}
		xputc(*str++);
 8001ef0:	f7ff ffde 	bl	8001eb0 <xputc>
 8001ef4:	e7f8      	b.n	8001ee8 <xputs+0x4>

08001ef6 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8001ef6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001efa:	4602      	mov	r2, r0
 8001efc:	460d      	mov	r5, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8001efe:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 8001f00:	2800      	cmp	r0, #0
 8001f02:	f000 80ca 	beq.w	800209a <xvprintf+0x1a4>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8001f06:	2825      	cmp	r0, #37	; 0x25
 8001f08:	d004      	beq.n	8001f14 <xvprintf+0x1e>
		c = *fmt++;					/* Get a char */
 8001f0a:	1c57      	adds	r7, r2, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8001f0c:	f7ff ffd0 	bl	8001eb0 <xputc>
 8001f10:	462c      	mov	r4, r5
 8001f12:	e052      	b.n	8001fba <xvprintf+0xc4>
		c = *fmt++;					/* Get first char of the sequense */
 8001f14:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 8001f16:	2b30      	cmp	r3, #48	; 0x30
 8001f18:	d128      	bne.n	8001f6c <xvprintf+0x76>
			f = 1; c = *fmt++;
 8001f1a:	7893      	ldrb	r3, [r2, #2]
 8001f1c:	1cd7      	adds	r7, r2, #3
 8001f1e:	2601      	movs	r6, #1
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8001f20:	f04f 0800 	mov.w	r8, #0
			w = w * 10 + c - '0';
 8001f24:	210a      	movs	r1, #10
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8001f26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f2a:	2a09      	cmp	r2, #9
 8001f2c:	d927      	bls.n	8001f7e <xvprintf+0x88>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8001f2e:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8001f32:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 8001f34:	bf02      	ittt	eq
 8001f36:	783b      	ldrbeq	r3, [r7, #0]
 8001f38:	f046 0604 	orreq.w	r6, r6, #4
 8001f3c:	3701      	addeq	r7, #1
		if (!c) break;				/* End of format? */
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80ab 	beq.w	800209a <xvprintf+0x1a4>
		if (d >= 'a') d -= 0x20;
 8001f44:	2b60      	cmp	r3, #96	; 0x60
 8001f46:	bf86      	itte	hi
 8001f48:	f1a3 0220 	subhi.w	r2, r3, #32
 8001f4c:	b2d2      	uxtbhi	r2, r2
 8001f4e:	461a      	movls	r2, r3
		switch (d) {				/* Type is... */
 8001f50:	2a4f      	cmp	r2, #79	; 0x4f
 8001f52:	d035      	beq.n	8001fc0 <xvprintf+0xca>
 8001f54:	d81a      	bhi.n	8001f8c <xvprintf+0x96>
 8001f56:	2a43      	cmp	r2, #67	; 0x43
 8001f58:	f000 8088 	beq.w	800206c <xvprintf+0x176>
 8001f5c:	2a44      	cmp	r2, #68	; 0x44
 8001f5e:	f000 808e 	beq.w	800207e <xvprintf+0x188>
 8001f62:	2a42      	cmp	r2, #66	; 0x42
 8001f64:	f000 8089 	beq.w	800207a <xvprintf+0x184>
			xputc(c); continue;
 8001f68:	4618      	mov	r0, r3
 8001f6a:	e7cf      	b.n	8001f0c <xvprintf+0x16>
			if (c == '-') {			/* Flag: left justified */
 8001f6c:	2b2d      	cmp	r3, #45	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
 8001f6e:	bf19      	ittee	ne
 8001f70:	1c97      	addne	r7, r2, #2
		f = 0;
 8001f72:	2600      	movne	r6, #0
				f = 2; c = *fmt++;
 8001f74:	1cd7      	addeq	r7, r2, #3
 8001f76:	7893      	ldrbeq	r3, [r2, #2]
 8001f78:	bf08      	it	eq
 8001f7a:	2602      	moveq	r6, #2
 8001f7c:	e7d0      	b.n	8001f20 <xvprintf+0x2a>
			w = w * 10 + c - '0';
 8001f7e:	fb01 3808 	mla	r8, r1, r8, r3
 8001f82:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8001f86:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001f8a:	e7cc      	b.n	8001f26 <xvprintf+0x30>
		switch (d) {				/* Type is... */
 8001f8c:	2a55      	cmp	r2, #85	; 0x55
 8001f8e:	d076      	beq.n	800207e <xvprintf+0x188>
 8001f90:	2a58      	cmp	r2, #88	; 0x58
 8001f92:	d070      	beq.n	8002076 <xvprintf+0x180>
 8001f94:	2a53      	cmp	r2, #83	; 0x53
 8001f96:	d1e7      	bne.n	8001f68 <xvprintf+0x72>
			p = va_arg(arp, char*);
 8001f98:	f8d5 9000 	ldr.w	r9, [r5]
 8001f9c:	1d2c      	adds	r4, r5, #4
			for (j = 0; p[j]; j++) ;
 8001f9e:	464b      	mov	r3, r9
 8001fa0:	eba3 0509 	sub.w	r5, r3, r9
 8001fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fa8:	2a00      	cmp	r2, #0
 8001faa:	d1f9      	bne.n	8001fa0 <xvprintf+0xaa>
			while (!(f & 2) && j++ < w) xputc(' ');
 8001fac:	07b0      	lsls	r0, r6, #30
 8001fae:	d552      	bpl.n	8002056 <xvprintf+0x160>
			xputs(p);
 8001fb0:	4648      	mov	r0, r9
 8001fb2:	f7ff ff97 	bl	8001ee4 <xputs>
			while (j++ < w) xputc(' ');
 8001fb6:	45a8      	cmp	r8, r5
 8001fb8:	d853      	bhi.n	8002062 <xvprintf+0x16c>
			xputc(c); continue;
 8001fba:	4625      	mov	r5, r4
 8001fbc:	463a      	mov	r2, r7
 8001fbe:	e79e      	b.n	8001efe <xvprintf+0x8>
			r = 8; break;
 8001fc0:	2008      	movs	r0, #8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8001fc2:	2a44      	cmp	r2, #68	; 0x44
 8001fc4:	6829      	ldr	r1, [r5, #0]
 8001fc6:	f105 0404 	add.w	r4, r5, #4
 8001fca:	d104      	bne.n	8001fd6 <xvprintf+0xe0>
		if (d == 'D' && (v & 0x80000000)) {
 8001fcc:	2900      	cmp	r1, #0
			v = 0 - v;
 8001fce:	bfbc      	itt	lt
 8001fd0:	4249      	neglt	r1, r1
			f |= 8;
 8001fd2:	f046 0608 	orrlt.w	r6, r6, #8
 8001fd6:	2b78      	cmp	r3, #120	; 0x78
 8001fd8:	bf0c      	ite	eq
 8001fda:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 8001fde:	f04f 0c07 	movne.w	ip, #7
		}
		i = 0;
 8001fe2:	2200      	movs	r2, #0
		do {
			d = (char)(v % r); v /= r;
 8001fe4:	fbb1 fef0 	udiv	lr, r1, r0
 8001fe8:	fb00 151e 	mls	r5, r0, lr, r1
 8001fec:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8001fee:	2d09      	cmp	r5, #9
 8001ff0:	bf84      	itt	hi
 8001ff2:	4463      	addhi	r3, ip
 8001ff4:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 8001ff6:	3330      	adds	r3, #48	; 0x30
			d = (char)(v % r); v /= r;
 8001ff8:	4671      	mov	r1, lr
			s[i++] = d + '0';
 8001ffa:	1c55      	adds	r5, r2, #1
 8001ffc:	f80d 3002 	strb.w	r3, [sp, r2]
		} while (v && i < sizeof(s));
 8002000:	f1be 0f00 	cmp.w	lr, #0
 8002004:	d002      	beq.n	800200c <xvprintf+0x116>
 8002006:	2d10      	cmp	r5, #16
 8002008:	d13b      	bne.n	8002082 <xvprintf+0x18c>
 800200a:	220f      	movs	r2, #15
		if (f & 8) s[i++] = '-';
 800200c:	0731      	lsls	r1, r6, #28
 800200e:	d505      	bpl.n	800201c <xvprintf+0x126>
 8002010:	ab04      	add	r3, sp, #16
 8002012:	441d      	add	r5, r3
 8002014:	232d      	movs	r3, #45	; 0x2d
 8002016:	f805 3c10 	strb.w	r3, [r5, #-16]
 800201a:	1c95      	adds	r5, r2, #2
		j = i; d = (f & 1) ? '0' : ' ';
 800201c:	f016 0f01 	tst.w	r6, #1
 8002020:	bf14      	ite	ne
 8002022:	f04f 0a30 	movne.w	sl, #48	; 0x30
 8002026:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) xputc(d);
 800202a:	07b3      	lsls	r3, r6, #30
		j = i; d = (f & 1) ? '0' : ' ';
 800202c:	46a9      	mov	r9, r5
		while (!(f & 2) && j++ < w) xputc(d);
 800202e:	d52e      	bpl.n	800208e <xvprintf+0x198>
		do xputc(s[--i]); while(i);
 8002030:	3d01      	subs	r5, #1
 8002032:	f81d 0005 	ldrb.w	r0, [sp, r5]
 8002036:	f7ff ff3b 	bl	8001eb0 <xputc>
 800203a:	2d00      	cmp	r5, #0
 800203c:	d1f8      	bne.n	8002030 <xvprintf+0x13a>
		while (j++ < w) xputc(' ');
 800203e:	45c8      	cmp	r8, r9
 8002040:	d9bb      	bls.n	8001fba <xvprintf+0xc4>
 8002042:	2020      	movs	r0, #32
 8002044:	f7ff ff34 	bl	8001eb0 <xputc>
 8002048:	f109 0901 	add.w	r9, r9, #1
 800204c:	e7f7      	b.n	800203e <xvprintf+0x148>
			while (!(f & 2) && j++ < w) xputc(' ');
 800204e:	2020      	movs	r0, #32
 8002050:	f7ff ff2e 	bl	8001eb0 <xputc>
 8002054:	4635      	mov	r5, r6
 8002056:	4545      	cmp	r5, r8
 8002058:	f105 0601 	add.w	r6, r5, #1
 800205c:	d3f7      	bcc.n	800204e <xvprintf+0x158>
 800205e:	4635      	mov	r5, r6
 8002060:	e7a6      	b.n	8001fb0 <xvprintf+0xba>
			while (j++ < w) xputc(' ');
 8002062:	2020      	movs	r0, #32
 8002064:	f7ff ff24 	bl	8001eb0 <xputc>
 8002068:	3501      	adds	r5, #1
 800206a:	e7a4      	b.n	8001fb6 <xvprintf+0xc0>
			xputc((char)va_arg(arp, int)); continue;
 800206c:	7828      	ldrb	r0, [r5, #0]
 800206e:	1d2c      	adds	r4, r5, #4
 8002070:	f7ff ff1e 	bl	8001eb0 <xputc>
 8002074:	e7a1      	b.n	8001fba <xvprintf+0xc4>
			r = 16; break;
 8002076:	2010      	movs	r0, #16
 8002078:	e7a3      	b.n	8001fc2 <xvprintf+0xcc>
			r = 2; break;
 800207a:	2002      	movs	r0, #2
 800207c:	e7a1      	b.n	8001fc2 <xvprintf+0xcc>
			r = 10; break;
 800207e:	200a      	movs	r0, #10
 8002080:	e79f      	b.n	8001fc2 <xvprintf+0xcc>
 8002082:	462a      	mov	r2, r5
 8002084:	e7ae      	b.n	8001fe4 <xvprintf+0xee>
		while (!(f & 2) && j++ < w) xputc(d);
 8002086:	4650      	mov	r0, sl
 8002088:	f7ff ff12 	bl	8001eb0 <xputc>
 800208c:	46b1      	mov	r9, r6
 800208e:	45c1      	cmp	r9, r8
 8002090:	f109 0601 	add.w	r6, r9, #1
 8002094:	d3f7      	bcc.n	8002086 <xvprintf+0x190>
 8002096:	46b1      	mov	r9, r6
 8002098:	e7ca      	b.n	8002030 <xvprintf+0x13a>
	}
}
 800209a:	b004      	add	sp, #16
 800209c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080020a0 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80020a0:	b40f      	push	{r0, r1, r2, r3}
 80020a2:	b507      	push	{r0, r1, r2, lr}
 80020a4:	a904      	add	r1, sp, #16
 80020a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 80020aa:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 80020ac:	f7ff ff23 	bl	8001ef6 <xvprintf>
	va_end(arp);
}
 80020b0:	b003      	add	sp, #12
 80020b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80020b6:	b004      	add	sp, #16
 80020b8:	4770      	bx	lr
	...

080020bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020c2:	e003      	b.n	80020cc <LoopCopyDataInit>

080020c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ca:	3104      	adds	r1, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020cc:	480b      	ldr	r0, [pc, #44]	; (80020fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020d4:	d3f6      	bcc.n	80020c4 <CopyDataInit>
	ldr	r2, =_sbss
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020d8:	e002      	b.n	80020e0 <LoopFillZerobss>

080020da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020dc:	f842 3b04 	str.w	r3, [r2], #4

080020e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <LoopForever+0x16>)
	cmp	r2, r3
 80020e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020e4:	d3f9      	bcc.n	80020da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020e6:	f7ff fde5 	bl	8001cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f000 f811 	bl	8002110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ee:	f7ff fce3 	bl	8001ab8 <main>

080020f2 <LoopForever>:

LoopForever:
    b LoopForever
 80020f2:	e7fe      	b.n	80020f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020f4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80020f8:	080021f8 	.word	0x080021f8
	ldr	r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002100:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002104:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002108:	20000204 	.word	0x20000204

0800210c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC1_2_IRQHandler>
	...

08002110 <__libc_init_array>:
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	4e0d      	ldr	r6, [pc, #52]	; (8002148 <__libc_init_array+0x38>)
 8002114:	4c0d      	ldr	r4, [pc, #52]	; (800214c <__libc_init_array+0x3c>)
 8002116:	1ba4      	subs	r4, r4, r6
 8002118:	10a4      	asrs	r4, r4, #2
 800211a:	2500      	movs	r5, #0
 800211c:	42a5      	cmp	r5, r4
 800211e:	d109      	bne.n	8002134 <__libc_init_array+0x24>
 8002120:	4e0b      	ldr	r6, [pc, #44]	; (8002150 <__libc_init_array+0x40>)
 8002122:	4c0c      	ldr	r4, [pc, #48]	; (8002154 <__libc_init_array+0x44>)
 8002124:	f000 f818 	bl	8002158 <_init>
 8002128:	1ba4      	subs	r4, r4, r6
 800212a:	10a4      	asrs	r4, r4, #2
 800212c:	2500      	movs	r5, #0
 800212e:	42a5      	cmp	r5, r4
 8002130:	d105      	bne.n	800213e <__libc_init_array+0x2e>
 8002132:	bd70      	pop	{r4, r5, r6, pc}
 8002134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002138:	4798      	blx	r3
 800213a:	3501      	adds	r5, #1
 800213c:	e7ee      	b.n	800211c <__libc_init_array+0xc>
 800213e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002142:	4798      	blx	r3
 8002144:	3501      	adds	r5, #1
 8002146:	e7f2      	b.n	800212e <__libc_init_array+0x1e>
 8002148:	080021f0 	.word	0x080021f0
 800214c:	080021f0 	.word	0x080021f0
 8002150:	080021f0 	.word	0x080021f0
 8002154:	080021f4 	.word	0x080021f4

08002158 <_init>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	bf00      	nop
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr

08002164 <_fini>:
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	bf00      	nop
 8002168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216a:	bc08      	pop	{r3}
 800216c:	469e      	mov	lr, r3
 800216e:	4770      	bx	lr
